<?php
// autogenerated file, do not edit!
class parse_phpeg {
    private $_s;
    private $_p;
    private $_maxp;
    private $_expected;
    
    private $_envs = array();
    public function __construct() {
        
    }
    
    
    public function __invoke($s) {
        return $this->parse($s);
    }
    
    public function parse($s) {
        $this->_s = $s;
        $this->_p = $this->_maxp = 0;
        $this->_expected = array();
        list($ok, $result) = $this->_parse_0();
        if (!$ok) {
            $before = str_replace(array("\r\n", "\r"), "\n", substr($s, 0, $this->_maxp));
            $after = str_replace(array("\r\n", "\r"), "\n", substr($s, $this->_maxp));
            $line = 1;
    
            if (($pos = strrpos($before, "\n")) !== FALSE) {
                $line = substr_count($before, "\n") + 1;
                $before = (string) substr($before, $pos + 1);
            }
    
            if (($pos = strpos($after, "\n")) !== FALSE) {
                $after = substr($after, 0, $pos);
            }
    
            return array(FALSE, NULL, (object) array('position' => $this->_maxp, 'line' => $line, 'column' => strlen($before) + 1, 'context' => $before . $after, 'expected' => $this->_expected));
        }
    
        return array(TRUE, $result, NULL);
    }
    private function _parse_0() {
        do {
            $_2 = $this->_parse_14();
            if (!$_2[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_3 = array(TRUE, array());
            do {
                $_pos3 = $this->_p;
                $_4 = array(FALSE, NULL);
                $_pos4 = $this->_p;
                do {
                    do {
                        $_7 = array(FALSE, NULL);
                        if (($_7_ = substr($this->_s, $this->_p, 10)) === "-namespace") {
                            $_7 = array(TRUE, $_7_);
                            $this->_p += 10;
                        } else {
                            if ($this->_p >= $this->_maxp) {
                                if ($this->_p > $this->_maxp) {
                                    $this->_maxp = $this->_p;
                                    $this->_expected = array();
                                }
                                if (!in_array('"-namespace"', $this->_expected)) {
                                    $this->_expected[] = '"-namespace"';
                                }
                            }
                        }
                        if (!$_7[0]) {
                            $_7 = array(FALSE, NULL);
                            break;
                        }
                        $_8 = $this->_parse_15();
                        if (!$_8[0]) {
                            $_7 = array(FALSE, NULL);
                            break;
                        }
                        do {
                            $_11 = $this->_parse_11();
                            if (!$_11[0]) {
                                $_11 = array(FALSE, NULL);
                                break;
                            }
                            $_12 = array(TRUE, array());
                            do {
                                $_pos12 = $this->_p;
                                do {
                                    $_15 = array(FALSE, NULL);
                                    if (($_15_ = substr($this->_s, $this->_p, 1)) === "\\") {
                                        $_15 = array(TRUE, $_15_);
                                        $this->_p += 1;
                                    } else {
                                        if ($this->_p >= $this->_maxp) {
                                            if ($this->_p > $this->_maxp) {
                                                $this->_maxp = $this->_p;
                                                $this->_expected = array();
                                            }
                                            if (!in_array('"\\\\"', $this->_expected)) {
                                                $this->_expected[] = '"\\\\"';
                                            }
                                        }
                                    }
                                    if (!$_15[0]) {
                                        $_15 = array(FALSE, NULL);
                                        break;
                                    }
                                    $_16 = $this->_parse_11();
                                    if (!$_16[0]) {
                                        $_15 = array(FALSE, NULL);
                                        break;
                                    }
                                } while(0);
                                $_14 = $_15;
                                $_13 = array(FALSE, NULL);
                                if ($_14[0]) {
                                    $_13 = array(TRUE, $this->_0(array('first' => &$_11[1], 'rest' => &$_12[1], 's' => &$_15[1], 'next' => &$_16[1])));
                                }
                                if (!$_13[0]) { $this->_p = $_pos12; }
                                else {
                                    $_12[0] = TRUE;
                                    $_12[1][] = $_13[1];
                                }
                            } while ($_13[0]);
                            if (!$_12[0]) {
                                $_11 = array(FALSE, NULL);
                                break;
                            }
                        } while(0);
                        $_10 = $_11;
                        $_9 = array(FALSE, NULL);
                        if ($_10[0]) {
                            $_9 = array(TRUE, $this->_1(array('first' => &$_11[1], 'rest' => &$_12[1])));
                        }
                        if (!$_9[0]) {
                            $_7 = array(FALSE, NULL);
                            break;
                        }
                        $_10 = $this->_parse_14();
                        if (!$_10[0]) {
                            $_7 = array(FALSE, NULL);
                            break;
                        }
                    } while(0);
                    $_6 = $_7;
                    $_5 = array(FALSE, NULL);
                    if ($_6[0]) {
                        $_5 = array(TRUE, $this->_2(array('declarations' => &$_3[1], 'namespace' => &$_9[1])));
                    }
                    if (!$_5[0]) {
                        $this->_p = $_pos4;
                    } else {
                        $_4 = $_5;
                        break;
                    }
                    do {
                        $_8 = array(FALSE, NULL);
                        if (($_8_ = substr($this->_s, $this->_p, 5)) === "-name") {
                            $_8 = array(TRUE, $_8_);
                            $this->_p += 5;
                        } else {
                            if ($this->_p >= $this->_maxp) {
                                if ($this->_p > $this->_maxp) {
                                    $this->_maxp = $this->_p;
                                    $this->_expected = array();
                                }
                                if (!in_array('"-name"', $this->_expected)) {
                                    $this->_expected[] = '"-name"';
                                }
                            }
                        }
                        if (!$_8[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                        $_9 = $this->_parse_15();
                        if (!$_9[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                        $_10 = $this->_parse_11();
                        if (!$_10[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                        $_11 = $this->_parse_14();
                        if (!$_11[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                    } while(0);
                    $_7 = $_8;
                    $_6 = array(FALSE, NULL);
                    if ($_7[0]) {
                        $_6 = array(TRUE, $this->_3(array('declarations' => &$_3[1], 'name' => &$_10[1])));
                    }
                    if (!$_6[0]) {
                        $this->_p = $_pos4;
                    } else {
                        $_4 = $_6;
                        break;
                    }
                    do {
                        $_9 = array(FALSE, NULL);
                        if (($_9_ = substr($this->_s, $this->_p, 5)) === "-init") {
                            $_9 = array(TRUE, $_9_);
                            $this->_p += 5;
                        } else {
                            if ($this->_p >= $this->_maxp) {
                                if ($this->_p > $this->_maxp) {
                                    $this->_maxp = $this->_p;
                                    $this->_expected = array();
                                }
                                if (!in_array('"-init"', $this->_expected)) {
                                    $this->_expected[] = '"-init"';
                                }
                            }
                        }
                        if (!$_9[0]) {
                            $_9 = array(FALSE, NULL);
                            break;
                        }
                        $_10 = $this->_parse_14();
                        if (!$_10[0]) {
                            $_9 = array(FALSE, NULL);
                            break;
                        }
                        $_11 = $this->_parse_12();
                        if (!$_11[0]) {
                            $_9 = array(FALSE, NULL);
                            break;
                        }
                        $_12 = $this->_parse_14();
                        if (!$_12[0]) {
                            $_9 = array(FALSE, NULL);
                            break;
                        }
                    } while(0);
                    $_8 = $_9;
                    $_7 = array(FALSE, NULL);
                    if ($_8[0]) {
                        $_7 = array(TRUE, $this->_4(array('declarations' => &$_3[1], 'code' => &$_11[1])));
                    }
                    if (!$_7[0]) {
                        $this->_p = $_pos4;
                    } else {
                        $_4 = $_7;
                        break;
                    }
                    do {
                        $_10 = array(FALSE, NULL);
                        if (($_10_ = substr($this->_s, $this->_p, 7)) === "-invoke") {
                            $_10 = array(TRUE, $_10_);
                            $this->_p += 7;
                        } else {
                            if ($this->_p >= $this->_maxp) {
                                if ($this->_p > $this->_maxp) {
                                    $this->_maxp = $this->_p;
                                    $this->_expected = array();
                                }
                                if (!in_array('"-invoke"', $this->_expected)) {
                                    $this->_expected[] = '"-invoke"';
                                }
                            }
                        }
                        if (!$_10[0]) {
                            $_10 = array(FALSE, NULL);
                            break;
                        }
                        $_11 = $this->_parse_14();
                        if (!$_11[0]) {
                            $_10 = array(FALSE, NULL);
                            break;
                        }
                        $_12 = array(TRUE, NULL);
                        $_pos12 = $this->_p;
                        $_13 = $this->_parse_17();
                        if (!$_13[0]) {
                            $this->_p = $_pos12;
                        } else {
                            $_12 = $_13;
                        }
                        if (!$_12[0]) {
                            $_10 = array(FALSE, NULL);
                            break;
                        }
                        $_13 = $this->_parse_14();
                        if (!$_13[0]) {
                            $_10 = array(FALSE, NULL);
                            break;
                        }
                        $_14 = $this->_parse_12();
                        if (!$_14[0]) {
                            $_10 = array(FALSE, NULL);
                            break;
                        }
                        $_15 = $this->_parse_14();
                        if (!$_15[0]) {
                            $_10 = array(FALSE, NULL);
                            break;
                        }
                    } while(0);
                    $_9 = $_10;
                    $_8 = array(FALSE, NULL);
                    if ($_9[0]) {
                        $_8 = array(TRUE, $this->_5(array('declarations' => &$_3[1], 'parameters' => &$_12[1], 'code' => &$_14[1])));
                    }
                    if (!$_8[0]) {
                        $this->_p = $_pos4;
                    } else {
                        $_4 = $_8;
                        break;
                    }
                    do {
                        $_11 = array(FALSE, NULL);
                        if (($_11_ = substr($this->_s, $this->_p, 7)) === "-import") {
                            $_11 = array(TRUE, $_11_);
                            $this->_p += 7;
                        } else {
                            if ($this->_p >= $this->_maxp) {
                                if ($this->_p > $this->_maxp) {
                                    $this->_maxp = $this->_p;
                                    $this->_expected = array();
                                }
                                if (!in_array('"-import"', $this->_expected)) {
                                    $this->_expected[] = '"-import"';
                                }
                            }
                        }
                        if (!$_11[0]) {
                            $_11 = array(FALSE, NULL);
                            break;
                        }
                        $_12 = $this->_parse_15();
                        if (!$_12[0]) {
                            $_11 = array(FALSE, NULL);
                            break;
                        }
                        $_13 = array(TRUE, NULL);
                        $_pos13 = $this->_p;
                        $_14 = array(FALSE, NULL);
                        $_pos14 = $this->_p;
                        do {
                            do {
                                $_17 = array(FALSE, NULL);
                                if (($_17_ = substr($this->_s, $this->_p, 1)) === ".") {
                                    $_17 = array(TRUE, $_17_);
                                    $this->_p += 1;
                                } else {
                                    if ($this->_p >= $this->_maxp) {
                                        if ($this->_p > $this->_maxp) {
                                            $this->_maxp = $this->_p;
                                            $this->_expected = array();
                                        }
                                        if (!in_array('"."', $this->_expected)) {
                                            $this->_expected[] = '"."';
                                        }
                                    }
                                }
                                if (!$_17[0]) {
                                    $_17 = array(FALSE, NULL);
                                    break;
                                }
                                $_18 = $this->_parse_15();
                                if (!$_18[0]) {
                                    $_17 = array(FALSE, NULL);
                                    break;
                                }
                            } while(0);
                            $_16 = $_17;
                            $_15 = array(FALSE, NULL);
                            if ($_16[0]) {
                                $_15 = array(TRUE, $this->_6(array('declarations' => &$_3[1], 'spec' => &$_13[1])));
                            }
                            if (!$_15[0]) {
                                $this->_p = $_pos14;
                            } else {
                                $_14 = $_15;
                                break;
                            }
                            do {
                                $_18 = $this->_parse_11();
                                if (!$_18[0]) {
                                    $_18 = array(FALSE, NULL);
                                    break;
                                }
                                $_19 = $this->_parse_15();
                                if (!$_19[0]) {
                                    $_18 = array(FALSE, NULL);
                                    break;
                                }
                            } while(0);
                            $_17 = $_18;
                            $_16 = array(FALSE, NULL);
                            if ($_17[0]) {
                                $_16 = array(TRUE, $this->_7(array('declarations' => &$_3[1], 'spec' => &$_13[1], 'name' => &$_18[1])));
                            }
                            if (!$_16[0]) {
                                $this->_p = $_pos14;
                            } else {
                                $_14 = $_16;
                                break;
                            }
                        } while(0);
                        if (!$_14[0]) {
                            $this->_p = $_pos13;
                        } else {
                            $_13 = $_14;
                        }
                        if (!$_13[0]) {
                            $_11 = array(FALSE, NULL);
                            break;
                        }
                        $_14 = $this->_parse_9();
                        if (!$_14[0]) {
                            $_11 = array(FALSE, NULL);
                            break;
                        }
                        $_15 = $this->_parse_14();
                        if (!$_15[0]) {
                            $_11 = array(FALSE, NULL);
                            break;
                        }
                    } while(0);
                    $_10 = $_11;
                    $_9 = array(FALSE, NULL);
                    if ($_10[0]) {
                        $_9 = array(TRUE, $this->_8(array('declarations' => &$_3[1], 'spec' => &$_13[1], 'path' => &$_14[1])));
                    }
                    if (!$_9[0]) {
                        $this->_p = $_pos4;
                    } else {
                        $_4 = $_9;
                        break;
                    }
                } while(0);
                if (!$_4[0]) { $this->_p = $_pos3; }
                else {
                    $_3[0] = TRUE;
                    $_3[1][] = $_4[1];
                }
            } while ($_4[0]);
            if (!$_3[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_4 = array(FALSE, array());
            do {
                $_pos4 = $this->_p;
                $_5 = array(FALSE, NULL);
                $_pos5 = $this->_p;
                do {
                    $_6 = $this->_parse_1();
                    if (!$_6[0]) {
                        $this->_p = $_pos5;
                    } else {
                        $_5 = $_6;
                        break;
                    }
                    $_7 = $this->_parse_2();
                    if (!$_7[0]) {
                        $this->_p = $_pos5;
                    } else {
                        $_5 = $_7;
                        break;
                    }
                } while(0);
                if (!$_5[0]) { $this->_p = $_pos4; }
                else {
                    $_4[0] = TRUE;
                    $_4[1][] = $_5[1];
                }
            } while ($_5[0]);
            if (!$_4[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_pos5 = $this->_p;
            $_6 = array(FALSE, NULL);
            if (isset($this->_s[$this->_p])) {
                $_6 = array(TRUE, $this->_s[$this->_p]);
                $this->_p++;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('any character', $this->_expected)) {
                        $this->_expected[] = 'any character';
                    }
                }
            }
            $_5 = array(!$_6[0], NULL);
            $this->_p = $_pos5;
            if (!$_5[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
        } while(0);
        $_1 = $_2;
        $_0 = array(FALSE, NULL);
        if ($_1[0]) {
            $_0 = array(TRUE, $this->_9(array('declarations' => &$_3[1], 'definitions' => &$_4[1])));
        }
        return $_0;
    }
    private function _parse_1() {
        do {
            $_2 = $this->_parse_11();
            if (!$_2[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_3 = $this->_parse_17();
            if (!$_3[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_4 = $this->_parse_14();
            if (!$_4[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_5 = array(FALSE, NULL);
            if (($_5_ = substr($this->_s, $this->_p, 1)) === "=") {
                $_5 = array(TRUE, $_5_);
                $this->_p += 1;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('"="', $this->_expected)) {
                        $this->_expected[] = '"="';
                    }
                }
            }
            if (!$_5[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_6 = $this->_parse_14();
            if (!$_6[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_7 = $this->_parse_3();
            if (!$_7[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_8 = $this->_parse_14();
            if (!$_8[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
        } while(0);
        $_1 = $_2;
        $_0 = array(FALSE, NULL);
        if ($_1[0]) {
            $_0 = array(TRUE, $this->_10(array('name' => &$_2[1], 'parameters' => &$_3[1], 'expression' => &$_7[1])));
        }
        return $_0;
    }
    private function _parse_2() {
        do {
            $_2 = $this->_parse_11();
            if (!$_2[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_3 = $this->_parse_14();
            if (!$_3[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_4 = array(FALSE, NULL);
            if (($_4_ = substr($this->_s, $this->_p, 1)) === "=") {
                $_4 = array(TRUE, $_4_);
                $this->_p += 1;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('"="', $this->_expected)) {
                        $this->_expected[] = '"="';
                    }
                }
            }
            if (!$_4[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_5 = $this->_parse_14();
            if (!$_5[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_6 = $this->_parse_3();
            if (!$_6[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_7 = $this->_parse_14();
            if (!$_7[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
        } while(0);
        $_1 = $_2;
        $_0 = array(FALSE, NULL);
        if ($_1[0]) {
            $_0 = array(TRUE, $this->_11(array('name' => &$_2[1], 'expression' => &$_6[1])));
        }
        return $_0;
    }
    private function _parse_3() {
        do {
            $_3 = $this->_parse_4();
            if (!$_3[0]) {
                $_3 = array(FALSE, NULL);
                break;
            }
            $_4 = array(TRUE, array());
            do {
                $_pos4 = $this->_p;
                do {
                    do {
                        $_8 = $this->_parse_14();
                        if (!$_8[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                        $_9 = array(FALSE, NULL);
                        if (($_9_ = substr($this->_s, $this->_p, 1)) === "/") {
                            $_9 = array(TRUE, $_9_);
                            $this->_p += 1;
                        } else {
                            if ($this->_p >= $this->_maxp) {
                                if ($this->_p > $this->_maxp) {
                                    $this->_maxp = $this->_p;
                                    $this->_expected = array();
                                }
                                if (!in_array('"/"', $this->_expected)) {
                                    $this->_expected[] = '"/"';
                                }
                            }
                        }
                        if (!$_9[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                        $_10 = $this->_parse_14();
                        if (!$_10[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                    } while(0);
                    $_7 = $_8;
                    if (!$_7[0]) {
                        $_7 = array(FALSE, NULL);
                        break;
                    }
                    $_8 = $this->_parse_4();
                    if (!$_8[0]) {
                        $_7 = array(FALSE, NULL);
                        break;
                    }
                } while(0);
                $_6 = $_7;
                $_5 = array(FALSE, NULL);
                if ($_6[0]) {
                    $_5 = array(TRUE, $this->_12(array('first' => &$_3[1], 'rest' => &$_4[1], 'next' => &$_8[1])));
                }
                if (!$_5[0]) { $this->_p = $_pos4; }
                else {
                    $_4[0] = TRUE;
                    $_4[1][] = $_5[1];
                }
            } while ($_5[0]);
            if (!$_4[0]) {
                $_3 = array(FALSE, NULL);
                break;
            }
        } while(0);
        $_2 = $_3;
        $_1 = array(FALSE, NULL);
        if ($_2[0]) {
            $_1 = array(TRUE, $this->_13(array('first' => &$_3[1], 'rest' => &$_4[1])));
        }
        $_0 = array(FALSE, NULL);
        if ($_1[0]) {
            $_0 = array(TRUE, $this->_14(array('expressions' => &$_1[1])));
        }
        return $_0;
    }
    private function _parse_4() {
        do {
            do {
                $_4 = $this->_parse_5();
                if (!$_4[0]) {
                    $_4 = array(FALSE, NULL);
                    break;
                }
                $_5 = array(TRUE, array());
                do {
                    $_pos5 = $this->_p;
                    do {
                        $_8 = $this->_parse_15();
                        if (!$_8[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                        $_9 = $this->_parse_5();
                        if (!$_9[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                    } while(0);
                    $_7 = $_8;
                    $_6 = array(FALSE, NULL);
                    if ($_7[0]) {
                        $_6 = array(TRUE, $this->_15(array('first' => &$_4[1], 'rest' => &$_5[1], 'next' => &$_9[1])));
                    }
                    if (!$_6[0]) { $this->_p = $_pos5; }
                    else {
                        $_5[0] = TRUE;
                        $_5[1][] = $_6[1];
                    }
                } while ($_6[0]);
                if (!$_5[0]) {
                    $_4 = array(FALSE, NULL);
                    break;
                }
            } while(0);
            $_3 = $_4;
            $_2 = array(FALSE, NULL);
            if ($_3[0]) {
                $_2 = array(TRUE, $this->_16(array('first' => &$_4[1], 'rest' => &$_5[1])));
            }
            if (!$_2[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_3 = $this->_parse_14();
            if (!$_3[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_4 = array(TRUE, NULL);
            $_pos4 = $this->_p;
            $_5 = $this->_parse_12();
            if (!$_5[0]) {
                $this->_p = $_pos4;
            } else {
                $_4 = $_5;
            }
            if (!$_4[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
        } while(0);
        $_1 = $_2;
        $_0 = array(FALSE, NULL);
        if ($_1[0]) {
            $_0 = array(TRUE, $this->_17(array('expressions' => &$_2[1], 'action' => &$_4[1])));
        }
        return $_0;
    }
    private function _parse_5() {
        $_0 = array(FALSE, NULL);
        $_pos0 = $this->_p;
        do {
            do {
                $_3 = array(FALSE, NULL);
                if (($_3_ = substr($this->_s, $this->_p, 1)) === "&") {
                    $_3 = array(TRUE, $_3_);
                    $this->_p += 1;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('"&"', $this->_expected)) {
                            $this->_expected[] = '"&"';
                        }
                    }
                }
                if (!$_3[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_4 = $this->_parse_6();
                if (!$_4[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
            } while(0);
            $_2 = $_3;
            $_1 = array(FALSE, NULL);
            if ($_2[0]) {
                $_1 = array(TRUE, $this->_18(array('expression' => &$_4[1])));
            }
            if (!$_1[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_1;
                break;
            }
            do {
                $_4 = array(FALSE, NULL);
                if (($_4_ = substr($this->_s, $this->_p, 1)) === "!") {
                    $_4 = array(TRUE, $_4_);
                    $this->_p += 1;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('"!"', $this->_expected)) {
                            $this->_expected[] = '"!"';
                        }
                    }
                }
                if (!$_4[0]) {
                    $_4 = array(FALSE, NULL);
                    break;
                }
                $_5 = $this->_parse_6();
                if (!$_5[0]) {
                    $_4 = array(FALSE, NULL);
                    break;
                }
            } while(0);
            $_3 = $_4;
            $_2 = array(FALSE, NULL);
            if ($_3[0]) {
                $_2 = array(TRUE, $this->_19(array('expression' => &$_5[1])));
            }
            if (!$_2[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_2;
                break;
            }
            do {
                $_5 = array(FALSE, NULL);
                if (($_5_ = substr($this->_s, $this->_p, 1)) === "?") {
                    $_5 = array(TRUE, $_5_);
                    $this->_p += 1;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('"?"', $this->_expected)) {
                            $this->_expected[] = '"?"';
                        }
                    }
                }
                if (!$_5[0]) {
                    $_5 = array(FALSE, NULL);
                    break;
                }
                $_6 = $this->_parse_12();
                if (!$_6[0]) {
                    $_5 = array(FALSE, NULL);
                    break;
                }
            } while(0);
            $_4 = $_5;
            $_3 = array(FALSE, NULL);
            if ($_4[0]) {
                $_3 = array(TRUE, $this->_20(array('code' => &$_6[1])));
            }
            if (!$_3[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_3;
                break;
            }
            do {
                $_6 = $this->_parse_11();
                if (!$_6[0]) {
                    $_6 = array(FALSE, NULL);
                    break;
                }
                $_7 = array(FALSE, NULL);
                if (($_7_ = substr($this->_s, $this->_p, 2)) === ":^") {
                    $_7 = array(TRUE, $_7_);
                    $this->_p += 2;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('":^"', $this->_expected)) {
                            $this->_expected[] = '":^"';
                        }
                    }
                }
                if (!$_7[0]) {
                    $_6 = array(FALSE, NULL);
                    break;
                }
            } while(0);
            $_5 = $_6;
            $_4 = array(FALSE, NULL);
            if ($_5[0]) {
                $_4 = array(TRUE, $this->_21(array('varname' => &$_6[1])));
            }
            if (!$_4[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_4;
                break;
            }
            do {
                $_7 = $this->_parse_11();
                if (!$_7[0]) {
                    $_7 = array(FALSE, NULL);
                    break;
                }
                $_8 = array(FALSE, NULL);
                if (($_8_ = substr($this->_s, $this->_p, 1)) === ":") {
                    $_8 = array(TRUE, $_8_);
                    $this->_p += 1;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('":"', $this->_expected)) {
                            $this->_expected[] = '":"';
                        }
                    }
                }
                if (!$_8[0]) {
                    $_7 = array(FALSE, NULL);
                    break;
                }
                $_9 = $this->_parse_6();
                if (!$_9[0]) {
                    $_7 = array(FALSE, NULL);
                    break;
                }
            } while(0);
            $_6 = $_7;
            $_5 = array(FALSE, NULL);
            if ($_6[0]) {
                $_5 = array(TRUE, $this->_22(array('varname' => &$_7[1], 'expression' => &$_9[1])));
            }
            if (!$_5[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_5;
                break;
            }
            $_6 = $this->_parse_6();
            if (!$_6[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_6;
                break;
            }
        } while(0);
        return $_0;
    }
    private function _parse_6() {
        do {
            $_2 = $this->_parse_7();
            if (!$_2[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_3 = array(TRUE, NULL);
            $_pos3 = $this->_p;
            $_4 = array(FALSE, NULL);
            $_pos4 = $this->_p;
            do {
                $_6 = array(FALSE, NULL);
                if (($_6_ = substr($this->_s, $this->_p, 1)) === "?") {
                    $_6 = array(TRUE, $_6_);
                    $this->_p += 1;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('"?"', $this->_expected)) {
                            $this->_expected[] = '"?"';
                        }
                    }
                }
                $_5 = array(FALSE, NULL);
                if ($_6[0]) {
                    $_5 = array(TRUE, $this->_23(array('expression' => &$_2[1], 'suffix' => &$_3[1])));
                }
                if (!$_5[0]) {
                    $this->_p = $_pos4;
                } else {
                    $_4 = $_5;
                    break;
                }
                $_7 = array(FALSE, NULL);
                if (($_7_ = substr($this->_s, $this->_p, 1)) === "*") {
                    $_7 = array(TRUE, $_7_);
                    $this->_p += 1;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('"*"', $this->_expected)) {
                            $this->_expected[] = '"*"';
                        }
                    }
                }
                $_6 = array(FALSE, NULL);
                if ($_7[0]) {
                    $_6 = array(TRUE, $this->_24(array('expression' => &$_2[1], 'suffix' => &$_3[1])));
                }
                if (!$_6[0]) {
                    $this->_p = $_pos4;
                } else {
                    $_4 = $_6;
                    break;
                }
                $_8 = array(FALSE, NULL);
                if (($_8_ = substr($this->_s, $this->_p, 1)) === "+") {
                    $_8 = array(TRUE, $_8_);
                    $this->_p += 1;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('"+"', $this->_expected)) {
                            $this->_expected[] = '"+"';
                        }
                    }
                }
                $_7 = array(FALSE, NULL);
                if ($_8[0]) {
                    $_7 = array(TRUE, $this->_25(array('expression' => &$_2[1], 'suffix' => &$_3[1])));
                }
                if (!$_7[0]) {
                    $this->_p = $_pos4;
                } else {
                    $_4 = $_7;
                    break;
                }
            } while(0);
            if (!$_4[0]) {
                $this->_p = $_pos3;
            } else {
                $_3 = $_4;
            }
            if (!$_3[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
        } while(0);
        $_1 = $_2;
        $_0 = array(FALSE, NULL);
        if ($_1[0]) {
            $_0 = array(TRUE, $this->_26(array('expression' => &$_2[1], 'suffix' => &$_3[1])));
        }
        return $_0;
    }
    private function _parse_7() {
        $_0 = array(FALSE, NULL);
        $_pos0 = $this->_p;
        do {
            do {
                $_3 = array(TRUE, NULL);
                $_pos3 = $this->_p;
                do {
                    $_6 = $this->_parse_11();
                    if (!$_6[0]) {
                        $_6 = array(FALSE, NULL);
                        break;
                    }
                    $_7 = array(FALSE, NULL);
                    if (($_7_ = substr($this->_s, $this->_p, 1)) === ".") {
                        $_7 = array(TRUE, $_7_);
                        $this->_p += 1;
                    } else {
                        if ($this->_p >= $this->_maxp) {
                            if ($this->_p > $this->_maxp) {
                                $this->_maxp = $this->_p;
                                $this->_expected = array();
                            }
                            if (!in_array('"."', $this->_expected)) {
                                $this->_expected[] = '"."';
                            }
                        }
                    }
                    if (!$_7[0]) {
                        $_6 = array(FALSE, NULL);
                        break;
                    }
                } while(0);
                $_5 = $_6;
                $_4 = array(FALSE, NULL);
                if ($_5[0]) {
                    $_4 = array(TRUE, $this->_27(array('importname' => &$_3[1], 'name' => &$_6[1])));
                }
                if (!$_4[0]) {
                    $this->_p = $_pos3;
                } else {
                    $_3 = $_4;
                }
                if (!$_3[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_4 = $this->_parse_11();
                if (!$_4[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_5 = array(FALSE, NULL);
                if (($_5_ = substr($this->_s, $this->_p, 1)) === "(") {
                    $_5 = array(TRUE, $_5_);
                    $this->_p += 1;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('"("', $this->_expected)) {
                            $this->_expected[] = '"("';
                        }
                    }
                }
                if (!$_5[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_6 = $this->_parse_14();
                if (!$_6[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_7 = array(TRUE, NULL);
                $_pos7 = $this->_p;
                do {
                    $_10 = $this->_parse_3();
                    if (!$_10[0]) {
                        $_10 = array(FALSE, NULL);
                        break;
                    }
                    $_11 = array(TRUE, array());
                    do {
                        $_pos11 = $this->_p;
                        do {
                            do {
                                $_15 = $this->_parse_14();
                                if (!$_15[0]) {
                                    $_15 = array(FALSE, NULL);
                                    break;
                                }
                                $_16 = array(FALSE, NULL);
                                if (($_16_ = substr($this->_s, $this->_p, 1)) === ",") {
                                    $_16 = array(TRUE, $_16_);
                                    $this->_p += 1;
                                } else {
                                    if ($this->_p >= $this->_maxp) {
                                        if ($this->_p > $this->_maxp) {
                                            $this->_maxp = $this->_p;
                                            $this->_expected = array();
                                        }
                                        if (!in_array('","', $this->_expected)) {
                                            $this->_expected[] = '","';
                                        }
                                    }
                                }
                                if (!$_16[0]) {
                                    $_15 = array(FALSE, NULL);
                                    break;
                                }
                                $_17 = $this->_parse_14();
                                if (!$_17[0]) {
                                    $_15 = array(FALSE, NULL);
                                    break;
                                }
                            } while(0);
                            $_14 = $_15;
                            if (!$_14[0]) {
                                $_14 = array(FALSE, NULL);
                                break;
                            }
                            $_15 = $this->_parse_3();
                            if (!$_15[0]) {
                                $_14 = array(FALSE, NULL);
                                break;
                            }
                        } while(0);
                        $_13 = $_14;
                        $_12 = array(FALSE, NULL);
                        if ($_13[0]) {
                            $_12 = array(TRUE, $this->_28(array('first' => &$_10[1], 'rest' => &$_11[1], 'next' => &$_15[1])));
                        }
                        if (!$_12[0]) { $this->_p = $_pos11; }
                        else {
                            $_11[0] = TRUE;
                            $_11[1][] = $_12[1];
                        }
                    } while ($_12[0]);
                    if (!$_11[0]) {
                        $_10 = array(FALSE, NULL);
                        break;
                    }
                } while(0);
                $_9 = $_10;
                $_8 = array(FALSE, NULL);
                if ($_9[0]) {
                    $_8 = array(TRUE, $this->_29(array('first' => &$_10[1], 'rest' => &$_11[1])));
                }
                if (!$_8[0]) {
                    $this->_p = $_pos7;
                } else {
                    $_7 = $_8;
                }
                if (!$_7[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_8 = $this->_parse_14();
                if (!$_8[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_9 = array(FALSE, NULL);
                if (($_9_ = substr($this->_s, $this->_p, 1)) === ")") {
                    $_9 = array(TRUE, $_9_);
                    $this->_p += 1;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('")"', $this->_expected)) {
                            $this->_expected[] = '")"';
                        }
                    }
                }
                if (!$_9[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_pos10 = $this->_p;
                do {
                    $_12 = $this->_parse_14();
                    if (!$_12[0]) {
                        $_12 = array(FALSE, NULL);
                        break;
                    }
                    $_13 = array(FALSE, NULL);
                    if (($_13_ = substr($this->_s, $this->_p, 1)) === "=") {
                        $_13 = array(TRUE, $_13_);
                        $this->_p += 1;
                    } else {
                        if ($this->_p >= $this->_maxp) {
                            if ($this->_p > $this->_maxp) {
                                $this->_maxp = $this->_p;
                                $this->_expected = array();
                            }
                            if (!in_array('"="', $this->_expected)) {
                                $this->_expected[] = '"="';
                            }
                        }
                    }
                    if (!$_13[0]) {
                        $_12 = array(FALSE, NULL);
                        break;
                    }
                } while(0);
                $_11 = $_12;
                $_10 = array(!$_11[0], NULL);
                $this->_p = $_pos10;
                if (!$_10[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
            } while(0);
            $_2 = $_3;
            $_1 = array(FALSE, NULL);
            if ($_2[0]) {
                $_1 = array(TRUE, $this->_30(array('importname' => &$_3[1], 'macroname' => &$_4[1], 'arguments' => &$_7[1])));
            }
            if (!$_1[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_1;
                break;
            }
            do {
                $_4 = array(TRUE, NULL);
                $_pos4 = $this->_p;
                do {
                    $_7 = $this->_parse_11();
                    if (!$_7[0]) {
                        $_7 = array(FALSE, NULL);
                        break;
                    }
                    $_8 = array(FALSE, NULL);
                    if (($_8_ = substr($this->_s, $this->_p, 1)) === ".") {
                        $_8 = array(TRUE, $_8_);
                        $this->_p += 1;
                    } else {
                        if ($this->_p >= $this->_maxp) {
                            if ($this->_p > $this->_maxp) {
                                $this->_maxp = $this->_p;
                                $this->_expected = array();
                            }
                            if (!in_array('"."', $this->_expected)) {
                                $this->_expected[] = '"."';
                            }
                        }
                    }
                    if (!$_8[0]) {
                        $_7 = array(FALSE, NULL);
                        break;
                    }
                } while(0);
                $_6 = $_7;
                $_5 = array(FALSE, NULL);
                if ($_6[0]) {
                    $_5 = array(TRUE, $this->_31(array('importname' => &$_4[1], 'name' => &$_7[1])));
                }
                if (!$_5[0]) {
                    $this->_p = $_pos4;
                } else {
                    $_4 = $_5;
                }
                if (!$_4[0]) {
                    $_4 = array(FALSE, NULL);
                    break;
                }
                $_5 = $this->_parse_11();
                if (!$_5[0]) {
                    $_4 = array(FALSE, NULL);
                    break;
                }
                $_pos6 = $this->_p;
                $_7 = array(FALSE, NULL);
                $_pos7 = $this->_p;
                do {
                    $_8 = array(FALSE, NULL);
                    if (($_8_ = substr($this->_s, $this->_p, 1)) === "(") {
                        $_8 = array(TRUE, $_8_);
                        $this->_p += 1;
                    } else {
                        if ($this->_p >= $this->_maxp) {
                            if ($this->_p > $this->_maxp) {
                                $this->_maxp = $this->_p;
                                $this->_expected = array();
                            }
                            if (!in_array('"("', $this->_expected)) {
                                $this->_expected[] = '"("';
                            }
                        }
                    }
                    if (!$_8[0]) {
                        $this->_p = $_pos7;
                    } else {
                        $_7 = $_8;
                        break;
                    }
                    do {
                        $_10 = $this->_parse_14();
                        if (!$_10[0]) {
                            $_10 = array(FALSE, NULL);
                            break;
                        }
                        $_11 = array(FALSE, NULL);
                        if (($_11_ = substr($this->_s, $this->_p, 1)) === "=") {
                            $_11 = array(TRUE, $_11_);
                            $this->_p += 1;
                        } else {
                            if ($this->_p >= $this->_maxp) {
                                if ($this->_p > $this->_maxp) {
                                    $this->_maxp = $this->_p;
                                    $this->_expected = array();
                                }
                                if (!in_array('"="', $this->_expected)) {
                                    $this->_expected[] = '"="';
                                }
                            }
                        }
                        if (!$_11[0]) {
                            $_10 = array(FALSE, NULL);
                            break;
                        }
                    } while(0);
                    $_9 = $_10;
                    if (!$_9[0]) {
                        $this->_p = $_pos7;
                    } else {
                        $_7 = $_9;
                        break;
                    }
                } while(0);
                $_6 = array(!$_7[0], NULL);
                $this->_p = $_pos6;
                if (!$_6[0]) {
                    $_4 = array(FALSE, NULL);
                    break;
                }
            } while(0);
            $_3 = $_4;
            $_2 = array(FALSE, NULL);
            if ($_3[0]) {
                $_2 = array(TRUE, $this->_32(array('importname' => &$_4[1], 'rulename' => &$_5[1])));
            }
            if (!$_2[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_2;
                break;
            }
            do {
                $_5 = array(FALSE, NULL);
                if (($_5_ = substr($this->_s, $this->_p, 1)) === "(") {
                    $_5 = array(TRUE, $_5_);
                    $this->_p += 1;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('"("', $this->_expected)) {
                            $this->_expected[] = '"("';
                        }
                    }
                }
                if (!$_5[0]) {
                    $_5 = array(FALSE, NULL);
                    break;
                }
                $_6 = $this->_parse_14();
                if (!$_6[0]) {
                    $_5 = array(FALSE, NULL);
                    break;
                }
                $_7 = $this->_parse_3();
                if (!$_7[0]) {
                    $_5 = array(FALSE, NULL);
                    break;
                }
                $_8 = $this->_parse_14();
                if (!$_8[0]) {
                    $_5 = array(FALSE, NULL);
                    break;
                }
                $_9 = array(FALSE, NULL);
                if (($_9_ = substr($this->_s, $this->_p, 1)) === ")") {
                    $_9 = array(TRUE, $_9_);
                    $this->_p += 1;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('")"', $this->_expected)) {
                            $this->_expected[] = '")"';
                        }
                    }
                }
                if (!$_9[0]) {
                    $_5 = array(FALSE, NULL);
                    break;
                }
            } while(0);
            $_4 = $_5;
            $_3 = array(FALSE, NULL);
            if ($_4[0]) {
                $_3 = array(TRUE, $this->_33(array('expression' => &$_7[1])));
            }
            if (!$_3[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_3;
                break;
            }
            $_5 = $this->_parse_9();
            $_4 = array(FALSE, NULL);
            if ($_5[0]) {
                $_4 = array(TRUE, $this->_34(array('literal' => &$_5[1])));
            }
            if (!$_4[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_4;
                break;
            }
            $_6 = $this->_parse_8();
            $_5 = array(FALSE, NULL);
            if ($_6[0]) {
                $_5 = array(TRUE, $this->_35(array('range' => &$_6[1])));
            }
            if (!$_5[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_5;
                break;
            }
            $_7 = array(FALSE, NULL);
            if (($_7_ = substr($this->_s, $this->_p, 1)) === ".") {
                $_7 = array(TRUE, $_7_);
                $this->_p += 1;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('"."', $this->_expected)) {
                        $this->_expected[] = '"."';
                    }
                }
            }
            $_6 = array(FALSE, NULL);
            if ($_7[0]) {
                $_6 = array(TRUE, $this->_36(array()));
            }
            if (!$_6[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_6;
                break;
            }
        } while(0);
        return $_0;
    }
    private function _parse_8() {
        do {
            $_2 = array(FALSE, NULL);
            if (($_2_ = substr($this->_s, $this->_p, 1)) === "[") {
                $_2 = array(TRUE, $_2_);
                $this->_p += 1;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('"["', $this->_expected)) {
                        $this->_expected[] = '"["';
                    }
                }
            }
            if (!$_2[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_3 = array(FALSE, array());
            do {
                $_pos3 = $this->_p;
                $_4 = array(FALSE, NULL);
                $_pos4 = $this->_p;
                do {
                    do {
                        $_pos7 = $this->_p;
                        $_8 = array(FALSE, NULL);
                        if (($_8_ = substr($this->_s, $this->_p, 1)) === "]") {
                            $_8 = array(TRUE, $_8_);
                            $this->_p += 1;
                        } else {
                            if ($this->_p >= $this->_maxp) {
                                if ($this->_p > $this->_maxp) {
                                    $this->_maxp = $this->_p;
                                    $this->_expected = array();
                                }
                                if (!in_array('"]"', $this->_expected)) {
                                    $this->_expected[] = '"]"';
                                }
                            }
                        }
                        $_7 = array(!$_8[0], NULL);
                        $this->_p = $_pos7;
                        if (!$_7[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                        $_8 = $this->_parse_10();
                        if (!$_8[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                        $_9 = array(FALSE, NULL);
                        if (($_9_ = substr($this->_s, $this->_p, 1)) === "-") {
                            $_9 = array(TRUE, $_9_);
                            $this->_p += 1;
                        } else {
                            if ($this->_p >= $this->_maxp) {
                                if ($this->_p > $this->_maxp) {
                                    $this->_maxp = $this->_p;
                                    $this->_expected = array();
                                }
                                if (!in_array('"-"', $this->_expected)) {
                                    $this->_expected[] = '"-"';
                                }
                            }
                        }
                        if (!$_9[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                        $_pos10 = $this->_p;
                        $_11 = array(FALSE, NULL);
                        if (($_11_ = substr($this->_s, $this->_p, 1)) === "]") {
                            $_11 = array(TRUE, $_11_);
                            $this->_p += 1;
                        } else {
                            if ($this->_p >= $this->_maxp) {
                                if ($this->_p > $this->_maxp) {
                                    $this->_maxp = $this->_p;
                                    $this->_expected = array();
                                }
                                if (!in_array('"]"', $this->_expected)) {
                                    $this->_expected[] = '"]"';
                                }
                            }
                        }
                        $_10 = array(!$_11[0], NULL);
                        $this->_p = $_pos10;
                        if (!$_10[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                        $_11 = $this->_parse_10();
                        if (!$_11[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                    } while(0);
                    $_6 = $_8;
                    $_5 = array(FALSE, NULL);
                    if ($_6[0]) {
                        $_5 = array(TRUE, $this->_37(array('matches' => &$_3[1], 'a' => &$_8[1], 'b' => &$_11[1])));
                    }
                    if (!$_5[0]) {
                        $this->_p = $_pos4;
                    } else {
                        $_4 = $_5;
                        break;
                    }
                    do {
                        $_pos8 = $this->_p;
                        $_9 = array(FALSE, NULL);
                        if (($_9_ = substr($this->_s, $this->_p, 1)) === "]") {
                            $_9 = array(TRUE, $_9_);
                            $this->_p += 1;
                        } else {
                            if ($this->_p >= $this->_maxp) {
                                if ($this->_p > $this->_maxp) {
                                    $this->_maxp = $this->_p;
                                    $this->_expected = array();
                                }
                                if (!in_array('"]"', $this->_expected)) {
                                    $this->_expected[] = '"]"';
                                }
                            }
                        }
                        $_8 = array(!$_9[0], NULL);
                        $this->_p = $_pos8;
                        if (!$_8[0]) {
                            $_9 = array(FALSE, NULL);
                            break;
                        }
                        $_9 = $this->_parse_10();
                        if (!$_9[0]) {
                            $_9 = array(FALSE, NULL);
                            break;
                        }
                    } while(0);
                    $_7 = $_9;
                    $_6 = array(FALSE, NULL);
                    if ($_7[0]) {
                        $_6 = array(TRUE, $this->_38(array('matches' => &$_3[1], 'c' => &$_9[1])));
                    }
                    if (!$_6[0]) {
                        $this->_p = $_pos4;
                    } else {
                        $_4 = $_6;
                        break;
                    }
                } while(0);
                if (!$_4[0]) { $this->_p = $_pos3; }
                else {
                    $_3[0] = TRUE;
                    $_3[1][] = $_4[1];
                }
            } while ($_4[0]);
            if (!$_3[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_4 = array(FALSE, NULL);
            if (($_4_ = substr($this->_s, $this->_p, 1)) === "]") {
                $_4 = array(TRUE, $_4_);
                $this->_p += 1;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('"]"', $this->_expected)) {
                        $this->_expected[] = '"]"';
                    }
                }
            }
            if (!$_4[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
        } while(0);
        $_1 = $_2;
        $_0 = array(FALSE, NULL);
        if ($_1[0]) {
            $_0 = array(TRUE, $this->_39(array('matches' => &$_3[1])));
        }
        return $_0;
    }
    private function _parse_9() {
        $_0 = array(FALSE, NULL);
        $_pos0 = $this->_p;
        do {
            do {
                $_3 = array(FALSE, NULL);
                if (isset($this->_s[$this->_p]) && is_int($_3_ = ord($this->_s[$this->_p])) && (($_3_ === 34))) {
                    $_3 = array(TRUE, $this->_s[$this->_p]);
                    $this->_p++;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('[\\"]', $this->_expected)) {
                            $this->_expected[] = '[\\"]';
                        }
                    }
                }
                if (!$_3[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_4 = array(TRUE, array());
                do {
                    $_pos4 = $this->_p;
                    do {
                        $_pos6 = $this->_p;
                        $_7 = array(FALSE, NULL);
                        if (isset($this->_s[$this->_p]) && is_int($_7_ = ord($this->_s[$this->_p])) && (($_7_ === 34))) {
                            $_7 = array(TRUE, $this->_s[$this->_p]);
                            $this->_p++;
                        } else {
                            if ($this->_p >= $this->_maxp) {
                                if ($this->_p > $this->_maxp) {
                                    $this->_maxp = $this->_p;
                                    $this->_expected = array();
                                }
                                if (!in_array('[\\"]', $this->_expected)) {
                                    $this->_expected[] = '[\\"]';
                                }
                            }
                        }
                        $_6 = array(!$_7[0], NULL);
                        $this->_p = $_pos6;
                        if (!$_6[0]) {
                            $_7 = array(FALSE, NULL);
                            break;
                        }
                        $_7 = $this->_parse_10();
                        if (!$_7[0]) {
                            $_7 = array(FALSE, NULL);
                            break;
                        }
                    } while(0);
                    $_5 = $_7;
                    if (!$_5[0]) { $this->_p = $_pos4; }
                    else {
                        $_4[0] = TRUE;
                        $_4[1][] = $_5[1];
                    }
                } while ($_5[0]);
                if (!$_4[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_5 = array(FALSE, NULL);
                if (isset($this->_s[$this->_p]) && is_int($_5_ = ord($this->_s[$this->_p])) && (($_5_ === 34))) {
                    $_5 = array(TRUE, $this->_s[$this->_p]);
                    $this->_p++;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('[\\"]', $this->_expected)) {
                            $this->_expected[] = '[\\"]';
                        }
                    }
                }
                if (!$_5[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
            } while(0);
            $_2 = $_3;
            $_1 = array(FALSE, NULL);
            if ($_2[0]) {
                $_1 = array(TRUE, $this->_40(array('value' => &$_4[1])));
            }
            if (!$_1[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_1;
                break;
            }
            do {
                $_4 = array(FALSE, NULL);
                if (isset($this->_s[$this->_p]) && is_int($_4_ = ord($this->_s[$this->_p])) && (($_4_ === 39))) {
                    $_4 = array(TRUE, $this->_s[$this->_p]);
                    $this->_p++;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('[\\\']', $this->_expected)) {
                            $this->_expected[] = '[\\\']';
                        }
                    }
                }
                if (!$_4[0]) {
                    $_4 = array(FALSE, NULL);
                    break;
                }
                $_5 = array(TRUE, array());
                do {
                    $_pos5 = $this->_p;
                    do {
                        $_pos7 = $this->_p;
                        $_8 = array(FALSE, NULL);
                        if (isset($this->_s[$this->_p]) && is_int($_8_ = ord($this->_s[$this->_p])) && (($_8_ === 39))) {
                            $_8 = array(TRUE, $this->_s[$this->_p]);
                            $this->_p++;
                        } else {
                            if ($this->_p >= $this->_maxp) {
                                if ($this->_p > $this->_maxp) {
                                    $this->_maxp = $this->_p;
                                    $this->_expected = array();
                                }
                                if (!in_array('[\\\']', $this->_expected)) {
                                    $this->_expected[] = '[\\\']';
                                }
                            }
                        }
                        $_7 = array(!$_8[0], NULL);
                        $this->_p = $_pos7;
                        if (!$_7[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                        $_8 = $this->_parse_10();
                        if (!$_8[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                    } while(0);
                    $_6 = $_8;
                    if (!$_6[0]) { $this->_p = $_pos5; }
                    else {
                        $_5[0] = TRUE;
                        $_5[1][] = $_6[1];
                    }
                } while ($_6[0]);
                if (!$_5[0]) {
                    $_4 = array(FALSE, NULL);
                    break;
                }
                $_6 = array(FALSE, NULL);
                if (isset($this->_s[$this->_p]) && is_int($_6_ = ord($this->_s[$this->_p])) && (($_6_ === 39))) {
                    $_6 = array(TRUE, $this->_s[$this->_p]);
                    $this->_p++;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('[\\\']', $this->_expected)) {
                            $this->_expected[] = '[\\\']';
                        }
                    }
                }
                if (!$_6[0]) {
                    $_4 = array(FALSE, NULL);
                    break;
                }
            } while(0);
            $_3 = $_4;
            $_2 = array(FALSE, NULL);
            if ($_3[0]) {
                $_2 = array(TRUE, $this->_41(array('value' => &$_5[1])));
            }
            if (!$_2[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_2;
                break;
            }
        } while(0);
        return $_0;
    }
    private function _parse_10() {
        $_0 = array(FALSE, NULL);
        $_pos0 = $this->_p;
        do {
            $_s1 = '';
            do {
                $_pos2 = $this->_p;
                $_3 = array(FALSE, NULL);
                if (($_3_ = substr($this->_s, $this->_p, 1)) === "\\") {
                    $_3 = array(TRUE, $_3_);
                    $this->_p += 1;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('"\\\\"', $this->_expected)) {
                            $this->_expected[] = '"\\\\"';
                        }
                    }
                }
                $_2 = array(!$_3[0], NULL);
                $this->_p = $_pos2;
                if (!$_2[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_s1 .= $_2[1];
                $_3 = array(FALSE, NULL);
                if (isset($this->_s[$this->_p])) {
                    $_3 = array(TRUE, $this->_s[$this->_p]);
                    $this->_p++;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('any character', $this->_expected)) {
                            $this->_expected[] = 'any character';
                        }
                    }
                }
                if (!$_3[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_s1 .= $_3[1];
            } while(0);
            $_1 = $_3;
            $_1[1] = $_s1;
            if (!$_1[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_1;
                break;
            }
            $_3 = array(FALSE, NULL);
            if (($_3_ = substr($this->_s, $this->_p, 2)) === "\\n") {
                $_3 = array(TRUE, $_3_);
                $this->_p += 2;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('"\\\\n"', $this->_expected)) {
                        $this->_expected[] = '"\\\\n"';
                    }
                }
            }
            $_2 = array(FALSE, NULL);
            if ($_3[0]) {
                $_2 = array(TRUE, $this->_42(array()));
            }
            if (!$_2[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_2;
                break;
            }
            $_4 = array(FALSE, NULL);
            if (($_4_ = substr($this->_s, $this->_p, 2)) === "\\r") {
                $_4 = array(TRUE, $_4_);
                $this->_p += 2;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('"\\\\r"', $this->_expected)) {
                        $this->_expected[] = '"\\\\r"';
                    }
                }
            }
            $_3 = array(FALSE, NULL);
            if ($_4[0]) {
                $_3 = array(TRUE, $this->_43(array()));
            }
            if (!$_3[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_3;
                break;
            }
            $_5 = array(FALSE, NULL);
            if (($_5_ = substr($this->_s, $this->_p, 2)) === "\\t") {
                $_5 = array(TRUE, $_5_);
                $this->_p += 2;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('"\\\\t"', $this->_expected)) {
                        $this->_expected[] = '"\\\\t"';
                    }
                }
            }
            $_4 = array(FALSE, NULL);
            if ($_5[0]) {
                $_4 = array(TRUE, $this->_44(array()));
            }
            if (!$_4[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_4;
                break;
            }
            $_6 = array(FALSE, NULL);
            if (($_6_ = substr($this->_s, $this->_p, 2)) === "\\\\") {
                $_6 = array(TRUE, $_6_);
                $this->_p += 2;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('"\\\\\\\\"', $this->_expected)) {
                        $this->_expected[] = '"\\\\\\\\"';
                    }
                }
            }
            $_5 = array(FALSE, NULL);
            if ($_6[0]) {
                $_5 = array(TRUE, $this->_45(array()));
            }
            if (!$_5[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_5;
                break;
            }
            $_7 = array(FALSE, NULL);
            if (($_7_ = substr($this->_s, $this->_p, 2)) === "\\\"") {
                $_7 = array(TRUE, $_7_);
                $this->_p += 2;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('"\\\\\\""', $this->_expected)) {
                        $this->_expected[] = '"\\\\\\""';
                    }
                }
            }
            $_6 = array(FALSE, NULL);
            if ($_7[0]) {
                $_6 = array(TRUE, $this->_46(array()));
            }
            if (!$_6[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_6;
                break;
            }
            $_8 = array(FALSE, NULL);
            if (($_8_ = substr($this->_s, $this->_p, 2)) === "\\\'") {
                $_8 = array(TRUE, $_8_);
                $this->_p += 2;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('"\\\\\\\'"', $this->_expected)) {
                        $this->_expected[] = '"\\\\\\\'"';
                    }
                }
            }
            $_7 = array(FALSE, NULL);
            if ($_8[0]) {
                $_7 = array(TRUE, $this->_47(array()));
            }
            if (!$_7[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_7;
                break;
            }
            $_9 = array(FALSE, NULL);
            if (($_9_ = substr($this->_s, $this->_p, 2)) === "\\]") {
                $_9 = array(TRUE, $_9_);
                $this->_p += 2;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('"\\\\]"', $this->_expected)) {
                        $this->_expected[] = '"\\\\]"';
                    }
                }
            }
            $_8 = array(FALSE, NULL);
            if ($_9[0]) {
                $_8 = array(TRUE, $this->_48(array()));
            }
            if (!$_8[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_8;
                break;
            }
            do {
                $_11 = array(FALSE, NULL);
                if (($_11_ = substr($this->_s, $this->_p, 2)) === "\\x") {
                    $_11 = array(TRUE, $_11_);
                    $this->_p += 2;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('"\\\\x"', $this->_expected)) {
                            $this->_expected[] = '"\\\\x"';
                        }
                    }
                }
                if (!$_11[0]) {
                    $_11 = array(FALSE, NULL);
                    break;
                }
                $_12 = array(FALSE, NULL);
                if (isset($this->_s[$this->_p]) && is_int($_12_ = ord($this->_s[$this->_p])) && ((48 <= $_12_ && $_12_ <= 57) || (97 <= $_12_ && $_12_ <= 102) || (65 <= $_12_ && $_12_ <= 70))) {
                    $_12 = array(TRUE, $this->_s[$this->_p]);
                    $this->_p++;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('[0-9a-fA-F]', $this->_expected)) {
                            $this->_expected[] = '[0-9a-fA-F]';
                        }
                    }
                }
                if (!$_12[0]) {
                    $_11 = array(FALSE, NULL);
                    break;
                }
                $_13 = array(FALSE, NULL);
                if (isset($this->_s[$this->_p]) && is_int($_13_ = ord($this->_s[$this->_p])) && ((48 <= $_13_ && $_13_ <= 57) || (97 <= $_13_ && $_13_ <= 102) || (65 <= $_13_ && $_13_ <= 70))) {
                    $_13 = array(TRUE, $this->_s[$this->_p]);
                    $this->_p++;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('[0-9a-fA-F]', $this->_expected)) {
                            $this->_expected[] = '[0-9a-fA-F]';
                        }
                    }
                }
                if (!$_13[0]) {
                    $_11 = array(FALSE, NULL);
                    break;
                }
            } while(0);
            $_10 = $_11;
            $_9 = array(FALSE, NULL);
            if ($_10[0]) {
                $_9 = array(TRUE, $this->_49(array('a' => &$_12[1], 'b' => &$_13[1])));
            }
            if (!$_9[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_9;
                break;
            }
        } while(0);
        return $_0;
    }
    private function _parse_11() {
        $_s0 = '';
        do {
            $_1 = array(FALSE, NULL);
            if (isset($this->_s[$this->_p]) && is_int($_1_ = ord($this->_s[$this->_p])) && ((97 <= $_1_ && $_1_ <= 122) || (65 <= $_1_ && $_1_ <= 90) || ($_1_ === 95))) {
                $_1 = array(TRUE, $this->_s[$this->_p]);
                $this->_p++;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('[a-zA-Z_]', $this->_expected)) {
                        $this->_expected[] = '[a-zA-Z_]';
                    }
                }
            }
            if (!$_1[0]) {
                $_1 = array(FALSE, NULL);
                break;
            }
            $_s0 .= $_1[1];
            $_2 = array(TRUE, '');
            do {
                $_pos2 = $this->_p;
                $_3 = array(FALSE, NULL);
                if (isset($this->_s[$this->_p]) && is_int($_3_ = ord($this->_s[$this->_p])) && ((97 <= $_3_ && $_3_ <= 122) || (65 <= $_3_ && $_3_ <= 90) || (48 <= $_3_ && $_3_ <= 57) || ($_3_ === 95))) {
                    $_3 = array(TRUE, $this->_s[$this->_p]);
                    $this->_p++;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('[a-zA-Z0-9_]', $this->_expected)) {
                            $this->_expected[] = '[a-zA-Z0-9_]';
                        }
                    }
                }
                if (!$_3[0]) { $this->_p = $_pos2; }
                else {
                    $_2[0] = TRUE;
                    $_2[1] .= $_3[1];
                }
            } while ($_3[0]);
            if (!$_2[0]) {
                $_1 = array(FALSE, NULL);
                break;
            }
            $_s0 .= $_2[1];
        } while(0);
        $_0 = $_1;
        $_0[1] = $_s0;
        return $_0;
    }
    private function _parse_12() {
        $_0 = array(FALSE, NULL);
        $_pos0 = $this->_p;
        do {
            do {
                $_3 = array(TRUE, NULL);
                $_pos3 = $this->_p;
                do {
                    $_5 = array(FALSE, NULL);
                    if (($_5_ = substr($this->_s, $this->_p, 2)) === "->") {
                        $_5 = array(TRUE, $_5_);
                        $this->_p += 2;
                    } else {
                        if ($this->_p >= $this->_maxp) {
                            if ($this->_p > $this->_maxp) {
                                $this->_maxp = $this->_p;
                                $this->_expected = array();
                            }
                            if (!in_array('"->"', $this->_expected)) {
                                $this->_expected[] = '"->"';
                            }
                        }
                    }
                    if (!$_5[0]) {
                        $_5 = array(FALSE, NULL);
                        break;
                    }
                    $_6 = $this->_parse_14();
                    if (!$_6[0]) {
                        $_5 = array(FALSE, NULL);
                        break;
                    }
                } while(0);
                $_4 = $_5;
                if (!$_4[0]) {
                    $this->_p = $_pos3;
                } else {
                    $_3 = $_4;
                }
                if (!$_3[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_4 = array(FALSE, NULL);
                if (($_4_ = substr($this->_s, $this->_p, 1)) === "{") {
                    $_4 = array(TRUE, $_4_);
                    $this->_p += 1;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('"{"', $this->_expected)) {
                            $this->_expected[] = '"{"';
                        }
                    }
                }
                if (!$_4[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_5 = $this->_parse_13();
                if (!$_5[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_6 = array(FALSE, NULL);
                if (($_6_ = substr($this->_s, $this->_p, 1)) === "}") {
                    $_6 = array(TRUE, $_6_);
                    $this->_p += 1;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('"}"', $this->_expected)) {
                            $this->_expected[] = '"}"';
                        }
                    }
                }
                if (!$_6[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
            } while(0);
            $_2 = $_3;
            $_1 = array(FALSE, NULL);
            if ($_2[0]) {
                $_1 = array(TRUE, $this->_50(array('code' => &$_5[1])));
            }
            if (!$_1[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_1;
                break;
            }
            do {
                $_4 = array(FALSE, NULL);
                if (($_4_ = substr($this->_s, $this->_p, 2)) === "->") {
                    $_4 = array(TRUE, $_4_);
                    $this->_p += 2;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('"->"', $this->_expected)) {
                            $this->_expected[] = '"->"';
                        }
                    }
                }
                if (!$_4[0]) {
                    $_4 = array(FALSE, NULL);
                    break;
                }
                $_5 = array(TRUE, '');
                do {
                    $_pos5 = $this->_p;
                    $_s6 = '';
                    do {
                        $_pos7 = $this->_p;
                        $_8 = $this->_parse_16();
                        $_7 = array(!$_8[0], NULL);
                        $this->_p = $_pos7;
                        if (!$_7[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                        $_s6 .= $_7[1];
                        $_8 = array(FALSE, NULL);
                        if (isset($this->_s[$this->_p])) {
                            $_8 = array(TRUE, $this->_s[$this->_p]);
                            $this->_p++;
                        } else {
                            if ($this->_p >= $this->_maxp) {
                                if ($this->_p > $this->_maxp) {
                                    $this->_maxp = $this->_p;
                                    $this->_expected = array();
                                }
                                if (!in_array('any character', $this->_expected)) {
                                    $this->_expected[] = 'any character';
                                }
                            }
                        }
                        if (!$_8[0]) {
                            $_8 = array(FALSE, NULL);
                            break;
                        }
                        $_s6 .= $_8[1];
                    } while(0);
                    $_6 = $_8;
                    $_6[1] = $_s6;
                    if (!$_6[0]) { $this->_p = $_pos5; }
                    else {
                        $_5[0] = TRUE;
                        $_5[1] .= $_6[1];
                    }
                } while ($_6[0]);
                if (!$_5[0]) {
                    $_4 = array(FALSE, NULL);
                    break;
                }
            } while(0);
            $_3 = $_4;
            $_2 = array(FALSE, NULL);
            if ($_3[0]) {
                $_2 = array(TRUE, $this->_51(array('code' => &$_5[1])));
            }
            if (!$_2[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_2;
                break;
            }
        } while(0);
        return $_0;
    }
    private function _parse_13() {
        $_1 = array(TRUE, array());
        do {
            $_pos1 = $this->_p;
            $_2 = array(FALSE, NULL);
            $_pos2 = $this->_p;
            do {
                do {
                    $_pos5 = $this->_p;
                    $_6 = array(FALSE, NULL);
                    if (($_6_ = substr($this->_s, $this->_p, 1)) === "{") {
                        $_6 = array(TRUE, $_6_);
                        $this->_p += 1;
                    } else {
                        if ($this->_p >= $this->_maxp) {
                            if ($this->_p > $this->_maxp) {
                                $this->_maxp = $this->_p;
                                $this->_expected = array();
                            }
                            if (!in_array('"{"', $this->_expected)) {
                                $this->_expected[] = '"{"';
                            }
                        }
                    }
                    $_5 = array(!$_6[0], NULL);
                    $this->_p = $_pos5;
                    if (!$_5[0]) {
                        $_7 = array(FALSE, NULL);
                        break;
                    }
                    $_pos6 = $this->_p;
                    $_7 = array(FALSE, NULL);
                    if (($_7_ = substr($this->_s, $this->_p, 1)) === "}") {
                        $_7 = array(TRUE, $_7_);
                        $this->_p += 1;
                    } else {
                        if ($this->_p >= $this->_maxp) {
                            if ($this->_p > $this->_maxp) {
                                $this->_maxp = $this->_p;
                                $this->_expected = array();
                            }
                            if (!in_array('"}"', $this->_expected)) {
                                $this->_expected[] = '"}"';
                            }
                        }
                    }
                    $_6 = array(!$_7[0], NULL);
                    $this->_p = $_pos6;
                    if (!$_6[0]) {
                        $_7 = array(FALSE, NULL);
                        break;
                    }
                    $_7 = array(FALSE, NULL);
                    if (isset($this->_s[$this->_p])) {
                        $_7 = array(TRUE, $this->_s[$this->_p]);
                        $this->_p++;
                    } else {
                        if ($this->_p >= $this->_maxp) {
                            if ($this->_p > $this->_maxp) {
                                $this->_maxp = $this->_p;
                                $this->_expected = array();
                            }
                            if (!in_array('any character', $this->_expected)) {
                                $this->_expected[] = 'any character';
                            }
                        }
                    }
                    if (!$_7[0]) {
                        $_7 = array(FALSE, NULL);
                        break;
                    }
                } while(0);
                $_4 = $_7;
                $_3 = array(FALSE, NULL);
                if ($_4[0]) {
                    $_3 = array(TRUE, $this->_52(array('inside' => &$_1[1], 'c' => &$_7[1])));
                }
                if (!$_3[0]) {
                    $this->_p = $_pos2;
                } else {
                    $_2 = $_3;
                    break;
                }
                do {
                    $_6 = array(FALSE, NULL);
                    if (($_6_ = substr($this->_s, $this->_p, 1)) === "{") {
                        $_6 = array(TRUE, $_6_);
                        $this->_p += 1;
                    } else {
                        if ($this->_p >= $this->_maxp) {
                            if ($this->_p > $this->_maxp) {
                                $this->_maxp = $this->_p;
                                $this->_expected = array();
                            }
                            if (!in_array('"{"', $this->_expected)) {
                                $this->_expected[] = '"{"';
                            }
                        }
                    }
                    if (!$_6[0]) {
                        $_6 = array(FALSE, NULL);
                        break;
                    }
                    $_7 = $this->_parse_13();
                    if (!$_7[0]) {
                        $_6 = array(FALSE, NULL);
                        break;
                    }
                    $_8 = array(FALSE, NULL);
                    if (($_8_ = substr($this->_s, $this->_p, 1)) === "}") {
                        $_8 = array(TRUE, $_8_);
                        $this->_p += 1;
                    } else {
                        if ($this->_p >= $this->_maxp) {
                            if ($this->_p > $this->_maxp) {
                                $this->_maxp = $this->_p;
                                $this->_expected = array();
                            }
                            if (!in_array('"}"', $this->_expected)) {
                                $this->_expected[] = '"}"';
                            }
                        }
                    }
                    if (!$_8[0]) {
                        $_6 = array(FALSE, NULL);
                        break;
                    }
                } while(0);
                $_5 = $_6;
                $_4 = array(FALSE, NULL);
                if ($_5[0]) {
                    $_4 = array(TRUE, $this->_53(array('inside' => &$_1[1], 'i' => &$_7[1])));
                }
                if (!$_4[0]) {
                    $this->_p = $_pos2;
                } else {
                    $_2 = $_4;
                    break;
                }
            } while(0);
            if (!$_2[0]) { $this->_p = $_pos1; }
            else {
                $_1[0] = TRUE;
                $_1[1][] = $_2[1];
            }
        } while ($_2[0]);
        $_0 = array(FALSE, NULL);
        if ($_1[0]) {
            $_0 = array(TRUE, $this->_54(array('inside' => &$_1[1])));
        }
        return $_0;
    }
    private function _parse_14() {
        $_0 = array(TRUE, '');
        do {
            $_pos0 = $this->_p;
            $_1 = array(FALSE, NULL);
            $_pos1 = $this->_p;
            do {
                $_2 = array(FALSE, NULL);
                if (isset($this->_s[$this->_p]) && is_int($_2_ = ord($this->_s[$this->_p])) && (($_2_ === 32) || ($_2_ === 9) || ($_2_ === 13) || ($_2_ === 10))) {
                    $_2 = array(TRUE, $this->_s[$this->_p]);
                    $this->_p++;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('[ \\t\\r\\n]', $this->_expected)) {
                            $this->_expected[] = '[ \\t\\r\\n]';
                        }
                    }
                }
                if (!$_2[0]) {
                    $this->_p = $_pos1;
                } else {
                    $_1 = $_2;
                    break;
                }
                $_s3 = '';
                do {
                    $_4 = array(FALSE, NULL);
                    if (($_4_ = substr($this->_s, $this->_p, 2)) === "//") {
                        $_4 = array(TRUE, $_4_);
                        $this->_p += 2;
                    } else {
                        if ($this->_p >= $this->_maxp) {
                            if ($this->_p > $this->_maxp) {
                                $this->_maxp = $this->_p;
                                $this->_expected = array();
                            }
                            if (!in_array('"//"', $this->_expected)) {
                                $this->_expected[] = '"//"';
                            }
                        }
                    }
                    if (!$_4[0]) {
                        $_4 = array(FALSE, NULL);
                        break;
                    }
                    $_s3 .= $_4[1];
                    $_5 = array(TRUE, '');
                    do {
                        $_pos5 = $this->_p;
                        $_s6 = '';
                        do {
                            $_pos7 = $this->_p;
                            $_8 = $this->_parse_16();
                            $_7 = array(!$_8[0], NULL);
                            $this->_p = $_pos7;
                            if (!$_7[0]) {
                                $_8 = array(FALSE, NULL);
                                break;
                            }
                            $_s6 .= $_7[1];
                            $_8 = array(FALSE, NULL);
                            if (isset($this->_s[$this->_p])) {
                                $_8 = array(TRUE, $this->_s[$this->_p]);
                                $this->_p++;
                            } else {
                                if ($this->_p >= $this->_maxp) {
                                    if ($this->_p > $this->_maxp) {
                                        $this->_maxp = $this->_p;
                                        $this->_expected = array();
                                    }
                                    if (!in_array('any character', $this->_expected)) {
                                        $this->_expected[] = 'any character';
                                    }
                                }
                            }
                            if (!$_8[0]) {
                                $_8 = array(FALSE, NULL);
                                break;
                            }
                            $_s6 .= $_8[1];
                        } while(0);
                        $_6 = $_8;
                        $_6[1] = $_s6;
                        if (!$_6[0]) { $this->_p = $_pos5; }
                        else {
                            $_5[0] = TRUE;
                            $_5[1] .= $_6[1];
                        }
                    } while ($_6[0]);
                    if (!$_5[0]) {
                        $_4 = array(FALSE, NULL);
                        break;
                    }
                    $_s3 .= $_5[1];
                } while(0);
                $_3 = $_4;
                $_3[1] = $_s3;
                if (!$_3[0]) {
                    $this->_p = $_pos1;
                } else {
                    $_1 = $_3;
                    break;
                }
                $_s4 = '';
                do {
                    $_5 = array(FALSE, NULL);
                    if (($_5_ = substr($this->_s, $this->_p, 2)) === "/*") {
                        $_5 = array(TRUE, $_5_);
                        $this->_p += 2;
                    } else {
                        if ($this->_p >= $this->_maxp) {
                            if ($this->_p > $this->_maxp) {
                                $this->_maxp = $this->_p;
                                $this->_expected = array();
                            }
                            if (!in_array('"/*"', $this->_expected)) {
                                $this->_expected[] = '"/*"';
                            }
                        }
                    }
                    if (!$_5[0]) {
                        $_5 = array(FALSE, NULL);
                        break;
                    }
                    $_s4 .= $_5[1];
                    $_6 = array(TRUE, '');
                    do {
                        $_pos6 = $this->_p;
                        $_s7 = '';
                        do {
                            $_pos8 = $this->_p;
                            $_9 = array(FALSE, NULL);
                            if (($_9_ = substr($this->_s, $this->_p, 2)) === "*/") {
                                $_9 = array(TRUE, $_9_);
                                $this->_p += 2;
                            } else {
                                if ($this->_p >= $this->_maxp) {
                                    if ($this->_p > $this->_maxp) {
                                        $this->_maxp = $this->_p;
                                        $this->_expected = array();
                                    }
                                    if (!in_array('"*/"', $this->_expected)) {
                                        $this->_expected[] = '"*/"';
                                    }
                                }
                            }
                            $_8 = array(!$_9[0], NULL);
                            $this->_p = $_pos8;
                            if (!$_8[0]) {
                                $_9 = array(FALSE, NULL);
                                break;
                            }
                            $_s7 .= $_8[1];
                            $_9 = array(FALSE, NULL);
                            if (isset($this->_s[$this->_p])) {
                                $_9 = array(TRUE, $this->_s[$this->_p]);
                                $this->_p++;
                            } else {
                                if ($this->_p >= $this->_maxp) {
                                    if ($this->_p > $this->_maxp) {
                                        $this->_maxp = $this->_p;
                                        $this->_expected = array();
                                    }
                                    if (!in_array('any character', $this->_expected)) {
                                        $this->_expected[] = 'any character';
                                    }
                                }
                            }
                            if (!$_9[0]) {
                                $_9 = array(FALSE, NULL);
                                break;
                            }
                            $_s7 .= $_9[1];
                        } while(0);
                        $_7 = $_9;
                        $_7[1] = $_s7;
                        if (!$_7[0]) { $this->_p = $_pos6; }
                        else {
                            $_6[0] = TRUE;
                            $_6[1] .= $_7[1];
                        }
                    } while ($_7[0]);
                    if (!$_6[0]) {
                        $_5 = array(FALSE, NULL);
                        break;
                    }
                    $_s4 .= $_6[1];
                    $_7 = array(FALSE, NULL);
                    if (($_7_ = substr($this->_s, $this->_p, 2)) === "*/") {
                        $_7 = array(TRUE, $_7_);
                        $this->_p += 2;
                    } else {
                        if ($this->_p >= $this->_maxp) {
                            if ($this->_p > $this->_maxp) {
                                $this->_maxp = $this->_p;
                                $this->_expected = array();
                            }
                            if (!in_array('"*/"', $this->_expected)) {
                                $this->_expected[] = '"*/"';
                            }
                        }
                    }
                    if (!$_7[0]) {
                        $_5 = array(FALSE, NULL);
                        break;
                    }
                    $_s4 .= $_7[1];
                } while(0);
                $_4 = $_5;
                $_4[1] = $_s4;
                if (!$_4[0]) {
                    $this->_p = $_pos1;
                } else {
                    $_1 = $_4;
                    break;
                }
            } while(0);
            if (!$_1[0]) { $this->_p = $_pos0; }
            else {
                $_0[0] = TRUE;
                $_0[1] .= $_1[1];
            }
        } while ($_1[0]);
        return $_0;
    }
    private function _parse_15() {
        $_0 = array(FALSE, array());
        do {
            $_pos0 = $this->_p;
            $_1 = array(FALSE, NULL);
            $_pos1 = $this->_p;
            do {
                $_2 = array(FALSE, NULL);
                if (isset($this->_s[$this->_p]) && is_int($_2_ = ord($this->_s[$this->_p])) && (($_2_ === 32) || ($_2_ === 9) || ($_2_ === 13) || ($_2_ === 10))) {
                    $_2 = array(TRUE, $this->_s[$this->_p]);
                    $this->_p++;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('[ \\t\\r\\n]', $this->_expected)) {
                            $this->_expected[] = '[ \\t\\r\\n]';
                        }
                    }
                }
                if (!$_2[0]) {
                    $this->_p = $_pos1;
                } else {
                    $_1 = $_2;
                    break;
                }
                do {
                    $_4 = array(FALSE, NULL);
                    if (($_4_ = substr($this->_s, $this->_p, 2)) === "//") {
                        $_4 = array(TRUE, $_4_);
                        $this->_p += 2;
                    } else {
                        if ($this->_p >= $this->_maxp) {
                            if ($this->_p > $this->_maxp) {
                                $this->_maxp = $this->_p;
                                $this->_expected = array();
                            }
                            if (!in_array('"//"', $this->_expected)) {
                                $this->_expected[] = '"//"';
                            }
                        }
                    }
                    if (!$_4[0]) {
                        $_4 = array(FALSE, NULL);
                        break;
                    }
                    $_5 = array(TRUE, '');
                    do {
                        $_pos5 = $this->_p;
                        $_s6 = '';
                        do {
                            $_pos7 = $this->_p;
                            $_8 = $this->_parse_16();
                            $_7 = array(!$_8[0], NULL);
                            $this->_p = $_pos7;
                            if (!$_7[0]) {
                                $_8 = array(FALSE, NULL);
                                break;
                            }
                            $_s6 .= $_7[1];
                            $_8 = array(FALSE, NULL);
                            if (isset($this->_s[$this->_p])) {
                                $_8 = array(TRUE, $this->_s[$this->_p]);
                                $this->_p++;
                            } else {
                                if ($this->_p >= $this->_maxp) {
                                    if ($this->_p > $this->_maxp) {
                                        $this->_maxp = $this->_p;
                                        $this->_expected = array();
                                    }
                                    if (!in_array('any character', $this->_expected)) {
                                        $this->_expected[] = 'any character';
                                    }
                                }
                            }
                            if (!$_8[0]) {
                                $_8 = array(FALSE, NULL);
                                break;
                            }
                            $_s6 .= $_8[1];
                        } while(0);
                        $_6 = $_8;
                        $_6[1] = $_s6;
                        if (!$_6[0]) { $this->_p = $_pos5; }
                        else {
                            $_5[0] = TRUE;
                            $_5[1] .= $_6[1];
                        }
                    } while ($_6[0]);
                    if (!$_5[0]) {
                        $_4 = array(FALSE, NULL);
                        break;
                    }
                    $_6 = $this->_parse_16();
                    if (!$_6[0]) {
                        $_4 = array(FALSE, NULL);
                        break;
                    }
                } while(0);
                $_3 = $_4;
                if (!$_3[0]) {
                    $this->_p = $_pos1;
                } else {
                    $_1 = $_3;
                    break;
                }
                $_s4 = '';
                do {
                    $_5 = array(FALSE, NULL);
                    if (($_5_ = substr($this->_s, $this->_p, 2)) === "/*") {
                        $_5 = array(TRUE, $_5_);
                        $this->_p += 2;
                    } else {
                        if ($this->_p >= $this->_maxp) {
                            if ($this->_p > $this->_maxp) {
                                $this->_maxp = $this->_p;
                                $this->_expected = array();
                            }
                            if (!in_array('"/*"', $this->_expected)) {
                                $this->_expected[] = '"/*"';
                            }
                        }
                    }
                    if (!$_5[0]) {
                        $_5 = array(FALSE, NULL);
                        break;
                    }
                    $_s4 .= $_5[1];
                    $_6 = array(TRUE, '');
                    do {
                        $_pos6 = $this->_p;
                        $_s7 = '';
                        do {
                            $_pos8 = $this->_p;
                            $_9 = array(FALSE, NULL);
                            if (($_9_ = substr($this->_s, $this->_p, 2)) === "*/") {
                                $_9 = array(TRUE, $_9_);
                                $this->_p += 2;
                            } else {
                                if ($this->_p >= $this->_maxp) {
                                    if ($this->_p > $this->_maxp) {
                                        $this->_maxp = $this->_p;
                                        $this->_expected = array();
                                    }
                                    if (!in_array('"*/"', $this->_expected)) {
                                        $this->_expected[] = '"*/"';
                                    }
                                }
                            }
                            $_8 = array(!$_9[0], NULL);
                            $this->_p = $_pos8;
                            if (!$_8[0]) {
                                $_9 = array(FALSE, NULL);
                                break;
                            }
                            $_s7 .= $_8[1];
                            $_9 = array(FALSE, NULL);
                            if (isset($this->_s[$this->_p])) {
                                $_9 = array(TRUE, $this->_s[$this->_p]);
                                $this->_p++;
                            } else {
                                if ($this->_p >= $this->_maxp) {
                                    if ($this->_p > $this->_maxp) {
                                        $this->_maxp = $this->_p;
                                        $this->_expected = array();
                                    }
                                    if (!in_array('any character', $this->_expected)) {
                                        $this->_expected[] = 'any character';
                                    }
                                }
                            }
                            if (!$_9[0]) {
                                $_9 = array(FALSE, NULL);
                                break;
                            }
                            $_s7 .= $_9[1];
                        } while(0);
                        $_7 = $_9;
                        $_7[1] = $_s7;
                        if (!$_7[0]) { $this->_p = $_pos6; }
                        else {
                            $_6[0] = TRUE;
                            $_6[1] .= $_7[1];
                        }
                    } while ($_7[0]);
                    if (!$_6[0]) {
                        $_5 = array(FALSE, NULL);
                        break;
                    }
                    $_s4 .= $_6[1];
                    $_7 = array(FALSE, NULL);
                    if (($_7_ = substr($this->_s, $this->_p, 2)) === "*/") {
                        $_7 = array(TRUE, $_7_);
                        $this->_p += 2;
                    } else {
                        if ($this->_p >= $this->_maxp) {
                            if ($this->_p > $this->_maxp) {
                                $this->_maxp = $this->_p;
                                $this->_expected = array();
                            }
                            if (!in_array('"*/"', $this->_expected)) {
                                $this->_expected[] = '"*/"';
                            }
                        }
                    }
                    if (!$_7[0]) {
                        $_5 = array(FALSE, NULL);
                        break;
                    }
                    $_s4 .= $_7[1];
                } while(0);
                $_4 = $_5;
                $_4[1] = $_s4;
                if (!$_4[0]) {
                    $this->_p = $_pos1;
                } else {
                    $_1 = $_4;
                    break;
                }
            } while(0);
            if (!$_1[0]) { $this->_p = $_pos0; }
            else {
                $_0[0] = TRUE;
                $_0[1][] = $_1[1];
            }
        } while ($_1[0]);
        return $_0;
    }
    private function _parse_16() {
        $_0 = array(FALSE, NULL);
        $_pos0 = $this->_p;
        do {
            $_1 = array(FALSE, NULL);
            if (($_1_ = substr($this->_s, $this->_p, 1)) === "\n") {
                $_1 = array(TRUE, $_1_);
                $this->_p += 1;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('"\\n"', $this->_expected)) {
                        $this->_expected[] = '"\\n"';
                    }
                }
            }
            if (!$_1[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_1;
                break;
            }
            $_s2 = '';
            do {
                $_3 = array(FALSE, NULL);
                if (($_3_ = substr($this->_s, $this->_p, 1)) === "\r") {
                    $_3 = array(TRUE, $_3_);
                    $this->_p += 1;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('"\\r"', $this->_expected)) {
                            $this->_expected[] = '"\\r"';
                        }
                    }
                }
                if (!$_3[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_s2 .= $_3[1];
                $_4 = array(TRUE, NULL);
                $_pos4 = $this->_p;
                $_5 = array(FALSE, NULL);
                if (($_5_ = substr($this->_s, $this->_p, 1)) === "\n") {
                    $_5 = array(TRUE, $_5_);
                    $this->_p += 1;
                } else {
                    if ($this->_p >= $this->_maxp) {
                        if ($this->_p > $this->_maxp) {
                            $this->_maxp = $this->_p;
                            $this->_expected = array();
                        }
                        if (!in_array('"\\n"', $this->_expected)) {
                            $this->_expected[] = '"\\n"';
                        }
                    }
                }
                if (!$_5[0]) {
                    $this->_p = $_pos4;
                } else {
                    $_4 = $_5;
                }
                if (!$_4[0]) {
                    $_3 = array(FALSE, NULL);
                    break;
                }
                $_s2 .= $_4[1];
            } while(0);
            $_2 = $_3;
            $_2[1] = $_s2;
            if (!$_2[0]) {
                $this->_p = $_pos0;
            } else {
                $_0 = $_2;
                break;
            }
        } while(0);
        return $_0;
    }
    private function _parse_17() {
        do {
            $_2 = array(FALSE, NULL);
            if (($_2_ = substr($this->_s, $this->_p, 1)) === "(") {
                $_2 = array(TRUE, $_2_);
                $this->_p += 1;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('"("', $this->_expected)) {
                        $this->_expected[] = '"("';
                    }
                }
            }
            if (!$_2[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_3 = $this->_parse_14();
            if (!$_3[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_4 = array(TRUE, NULL);
            $_pos4 = $this->_p;
            do {
                $_7 = $this->_parse_11();
                if (!$_7[0]) {
                    $_7 = array(FALSE, NULL);
                    break;
                }
                $_8 = array(TRUE, array());
                do {
                    $_pos8 = $this->_p;
                    do {
                        do {
                            $_12 = $this->_parse_14();
                            if (!$_12[0]) {
                                $_12 = array(FALSE, NULL);
                                break;
                            }
                            $_13 = array(FALSE, NULL);
                            if (($_13_ = substr($this->_s, $this->_p, 1)) === ",") {
                                $_13 = array(TRUE, $_13_);
                                $this->_p += 1;
                            } else {
                                if ($this->_p >= $this->_maxp) {
                                    if ($this->_p > $this->_maxp) {
                                        $this->_maxp = $this->_p;
                                        $this->_expected = array();
                                    }
                                    if (!in_array('","', $this->_expected)) {
                                        $this->_expected[] = '","';
                                    }
                                }
                            }
                            if (!$_13[0]) {
                                $_12 = array(FALSE, NULL);
                                break;
                            }
                            $_14 = $this->_parse_14();
                            if (!$_14[0]) {
                                $_12 = array(FALSE, NULL);
                                break;
                            }
                        } while(0);
                        $_11 = $_12;
                        if (!$_11[0]) {
                            $_11 = array(FALSE, NULL);
                            break;
                        }
                        $_12 = $this->_parse_11();
                        if (!$_12[0]) {
                            $_11 = array(FALSE, NULL);
                            break;
                        }
                    } while(0);
                    $_10 = $_11;
                    $_9 = array(FALSE, NULL);
                    if ($_10[0]) {
                        $_9 = array(TRUE, $this->_55(array('first' => &$_7[1], 'rest' => &$_8[1], 'next' => &$_12[1])));
                    }
                    if (!$_9[0]) { $this->_p = $_pos8; }
                    else {
                        $_8[0] = TRUE;
                        $_8[1][] = $_9[1];
                    }
                } while ($_9[0]);
                if (!$_8[0]) {
                    $_7 = array(FALSE, NULL);
                    break;
                }
            } while(0);
            $_6 = $_7;
            $_5 = array(FALSE, NULL);
            if ($_6[0]) {
                $_5 = array(TRUE, $this->_56(array('first' => &$_7[1], 'rest' => &$_8[1])));
            }
            if (!$_5[0]) {
                $this->_p = $_pos4;
            } else {
                $_4 = $_5;
            }
            if (!$_4[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_5 = $this->_parse_14();
            if (!$_5[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
            $_6 = array(FALSE, NULL);
            if (($_6_ = substr($this->_s, $this->_p, 1)) === ")") {
                $_6 = array(TRUE, $_6_);
                $this->_p += 1;
            } else {
                if ($this->_p >= $this->_maxp) {
                    if ($this->_p > $this->_maxp) {
                        $this->_maxp = $this->_p;
                        $this->_expected = array();
                    }
                    if (!in_array('")"', $this->_expected)) {
                        $this->_expected[] = '")"';
                    }
                }
            }
            if (!$_6[0]) {
                $_2 = array(FALSE, NULL);
                break;
            }
        } while(0);
        $_1 = $_2;
        $_0 = array(FALSE, NULL);
        if ($_1[0]) {
            $_0 = array(TRUE, $this->_57(array('parameters' => &$_4[1])));
        }
        return $_0;
    }
    private function _0() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return $s . $next;
    
    }
    
    private function _1() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return $first . implode("", $rest);
    
    }
    
    private function _2() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("namespace", $namespace);
    
    }
    
    private function _3() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("name", $name);
    
    }
    
    private function _4() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("init", $code);
    
    }
    
    private function _5() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("invoke", (array) $parameters, $code);
    
    }
    
    private function _6() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return TRUE;
    
    }
    
    private function _7() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return $name;
    
    }
    
    private function _8() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("import", $spec, $path);
    
    }
    
    private function _9() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("phpeg", array_merge($declarations, $definitions));
    
    }
    
    private function _10() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("macro", $name, $parameters, $expression);
    
    }
    
    private function _11() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("rule", $name, $expression);
    
    }
    
    private function _12() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return $next;
    
    }
    
    private function _13() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array_merge(array($first), $rest);
    
    }
    
    private function _14() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        if (count($expressions) < 2) {
                    return $expressions[0];
                } else {
                    return array("first", $expressions);
                }
            
    
    }
    
    private function _15() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return $next;
    
    }
    
    private function _16() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array_merge(array($first), $rest);
    
    }
    
    private function _17() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        $ret = count($expressions) < 2
                       ? $expressions[0]
                       : array("all", $expressions);
        
                if ($action) {
                    $ret = array("action", $ret, $action);
                }
        
                return $ret;
            
    
    }
    
    private function _18() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("and", $expression);
    
    }
    
    private function _19() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("not", $expression);
    
    }
    
    private function _20() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("semantic_predicate", $code);
    
    }
    
    private function _21() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("bind", $varname, array("position"));
    
    }
    
    private function _22() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("bind", $varname, $expression);
    
    }
    
    private function _23() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return "optional";
    
    }
    
    private function _24() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return "zero_or_more";
    
    }
    
    private function _25() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return "one_or_more";
    
    }
    
    private function _26() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return $suffix ? array($suffix, $expression) : $expression;
    
    }
    
    private function _27() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return $name;
    
    }
    
    private function _28() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return $next;
    
    }
    
    private function _29() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array_merge(array($first), $rest);
    
    }
    
    private function _30() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("expand", $importname ? array($importname, $macroname) : $macroname, (array) $arguments);
    
    }
    
    private function _31() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return $name;
    
    }
    
    private function _32() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("apply", $importname ? array($importname, $rulename) : $rulename);
    
    }
    
    private function _33() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return $expression;
    
    }
    
    private function _34() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("literal", $literal);
    
    }
    
    private function _35() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("range", $range);
    
    }
    
    private function _36() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array("any");
    
    }
    
    private function _37() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array(ord($a), ord($b));
    
    }
    
    private function _38() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return ord($c);
    
    }
    
    private function _39() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return $matches;
    
    }
    
    private function _40() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return implode("", $value);
    
    }
    
    private function _41() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return implode("", $value);
    
    }
    
    private function _42() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return "\n";
    
    }
    
    private function _43() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return "\r";
    
    }
    
    private function _44() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return "\t";
    
    }
    
    private function _45() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return "\\";
    
    }
    
    private function _46() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return '"';
    
    }
    
    private function _47() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return "'";
    
    }
    
    private function _48() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return ']';
    
    }
    
    private function _49() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return chr(hexdec($a . $b));
    
    }
    
    private function _50() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return ltrim($code);
    
    }
    
    private function _51() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return "return " . trim($code) . ";";
    
    }
    
    private function _52() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return $c;
    
    }
    
    private function _53() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return "{" . $i . "}";
    
    }
    
    private function _54() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return implode("", $inside);
    
    }
    
    private function _55() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return $next;
    
    }
    
    private function _56() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return array_merge(array($first), $rest);
    
    }
    
    private function _57() {
        extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);
        return (array) $parameters;
    
    }
}
