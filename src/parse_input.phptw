-init {
    $self = (object) array(
        "namespace" => NULL,
        "name" => NULL,
        "init" => NULL,
        "invoke" => NULL,
        "provided" => array(),
        "provides" => array(),
        "n" => 0,
        "final_reindex" => array(),
        "definitions" => array(),
        "file" => NULL,
        "imported_by" => array(),
        "defined" => array(),
    );
}

-invoke (file, imported_by, provided) {
    $self->file = WALK(array("file_", $file));
    $self->imported_by = $imported_by;

    $self->provided = $provided;
    if (!empty($self->provided)) {
        $self->n = end(end($self->provided)->reindex) + 1;
    }

    list($ok, $tree, $errinfo) = c(new parse_phpeg, file_get_contents($file));

    if (!$ok) {
        die("Parse error in file {$self->file} on line {$errinfo->line}, column {$errinfo->column}:\n" .
            "{$errinfo->context}\n" .
            str_repeat(" ", $errinfo->column - 1) . "^\n" .
            "Expected: " . implode(", ", $errinfo->expected) . "\n");
    }

    return WALK($tree);
}


// main matcher
phpeg (nodes) {
    WALKEACH(c(new select_nodes, array("namespace", "name", "init", "invoke"), $nodes));

    c(new check_macros_recursive, $self->file, c(new select_nodes, array("macro"), $nodes));

    $self->definitions = array_values(c(new select_nodes, array("rule", "macro"), $nodes));
    $reindex = array();

    foreach ($self->definitions as $k => $definition) {
        $reindex[$self->defined[] = WALK($definition)] = $self->n + $k;
    }

    $saved_definitions = $self->definitions;

    $self->provides[$self->file] = (object) array(
        "namespace" => $self->namespace,
        "name" => $self->name,
        "init" => $self->init,
        "invoke" => $self->invoke,
        "reindex" => $reindex,
        "start" => $self->n,
        "count" => count($self->definitions),
    );

    $imports = c(new select_nodes, array("import"), $nodes);

    if (!empty($imports)) {
        WALKEACH($imports);
    }

    list($doesnt_exist, $reindexed) =
        c(new reindex, $saved_definitions, array_merge($reindex, $self->final_reindex));

    if (!empty($doesnt_exist)) {
        die("These rules needed in file {$self->file}, but does not exist: " .
            implode(", ", $doesnt_exist) . ".\n");
    }

    $self->definitions = array_merge(
        $reindexed,
        array_slice($self->definitions, count($saved_definitions))
    );

    return array($self->provides, $self->definitions);
}

// process imported files
import (spec, path) {
    if ($spec === TRUE) {
        $prefix = "";

    } else if (is_string($spec)) {
        $prefix = $spec . ".";

    } else {
        $prefix = basename($path);
        if (($pos = strrpos($prefix, ".")) !== FALSE) {
            $prefix = substr($prefix, 0, $pos);
        }
        $prefix .= ".";
    }

    $file = WALK(array("file_", $path));

    if (isset($self->provided[$file])) {
        $for_final_reindex = $self->provided[$file]->reindex;

    } else {
        if (!isset($self->provides[$file])) {
            list($provides, $definitions) = c(new self,
                $file,
                array_merge($self->imported_by, array($self->file)),
                array_merge($self->provided, $self->provides));

            $self->n = end(end($provides)->reindex) + 1;

            $self->definitions = array_merge($self->definitions, $definitions);
            $self->provides = array_merge($self->provides, $provides);
        }

        $for_final_reindex = $self->provides[$file]->reindex;
    }

    foreach ($for_final_reindex as $from => $to) {
        if (in_array($prefix . $from, $self->defined)) {
            die("Name collision: {$from} imported by {$file} already defined in {$self->file}.\n");
        }
        $self->final_reindex[$prefix . $from] = $to;
    }

}

// canonicalize path
file_ (path) {

    if (strncmp($path, "php:", 4) === 0) {
        return $path;
    }

    if ($self->file !== NULL) {
        $path = dirname($self->file) . "/" . $path;
    }

    $realpath = realpath($path);
    if (!$realpath) {
        die("File {$path} does not exist.\n");
    }

    return $realpath;
}

// save declarations
namespace (namespace) {
    if ($self->namespace !== NULL) {
        die("Multiple namespace declarations in file {$self->file}" .
            (!empty($self->imported_by) ? " imported by " . implode(", ", $self->imported_by) : "") .
            ".\n");
    }

    $self->namespace = $namespace;

    return FALSE;
}

name (name) {
    if ($self->name !== NULL) {
        die("Multiple name declarations in file {$self->file}" .
            (!empty($self->imported_by) ? " imported by " . implode(", ", $self->imported_by) : "") .
            ".\n");
    }

    $self->name = $name;

    return FALSE;
}

init (code) {
    if ($self->init !== NULL) {
        die("Multiple init declarations in file {$self->file}" .
            (!empty($self->imported_by) ? " imported by " . implode(", ", $self->imported_by) : "") .
            ".\n");
    }

    $self->init = $code;

    return FALSE;
}

invoke (arguments, code) {
    if ($self->invoke !== NULL) {
        die("Multiple invoke declarations in file {$self->file}" .
            (!empty($self->imported_by) ? " imported by " . implode(", ", $self->imported_by) : "") .
            ".\n");
    }

    $self->invoke = array($arguments, $code);

    return FALSE;
}

// for self reindex
rule, macro (name) -> $name
