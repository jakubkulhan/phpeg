-init {
    $self = (object) array(
        "program" => array(),
        "codes" => array(),
        "code_to_label" => array(),
        "returns" => array(),
        "common" => NULL,
    );
}

-invoke (input) {
    list($namespace, $name, $inits, $invoke, $constructor, $privates, $definitions) = c(new process_input, $input);
    list($self->program, $self->codes, $self->code_to_label, $self->returns) = c(new link_machine, $definitions);
    return c($self->common = new generate_common, $this, $namespace, $name, $inits, $invoke, $constructor, $privates);
}

prolog_ -> ""

parse_ {
    $ret = "public function parse(\$_s) {\n" .
           "    \$_addr = 0;\n" .
           "    \$_maxp = \$_p = 0;\n" .
           "    \$_expected = array();\n";

    foreach ($self->program as $addr => $instruction) {
        $ret .= "    L$addr: " . WALK($instruction) . "\n";
    }

    $ret .= "    Lend:\n" .
            "    list(\$ok, \$result) = array(!\$_fail, \$_value);\n" .
            "    if (!\$ok) {\n" .
            "        \$before = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", substr(\$_s, 0, \$_maxp));\n" .
            "        \$after = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", substr(\$_s, \$_maxp));\n" .
            "        \$line = 1;\n" .
            "        if ((\$pos = strrpos(\$before, \"\\n\")) !== FALSE) {\n" .
            "            \$line = substr_count(\$before, \"\\n\") + 1;\n" .
            "            \$before = (string) substr(\$before, \$pos + 1);\n" .
            "        }\n" .
            "        if ((\$pos = strpos(\$after, \"\\n\")) !== FALSE) {\n" .
            "            \$after = substr(\$after, 0, \$pos);\n" .
            "        }\n" .
            "        return array(FALSE, NULL, (object) array('position' => \$_maxp, 'line' => \$line, 'column' => strlen(\$before) + 1, 'context' => \$before . \$after, 'expected' => \$_expected));\n" .
            "    }\n" .
            "    return array(TRUE, \$result, NULL);\n" .
            "}\n";

    foreach ($self->codes as $k => $code) {
        $ret .= "private function _$k() {\n" .
                     i($self->common->walk(array("extract_environment_"))) .
                "    extract(func_get_arg(0), EXTR_OVERWRITE | EXTR_REFS);\n" .
                     i($code) .
                "\n}\n";
    }

    return $ret;
}

phpize_ (a) {
    if (is_array($a)) {
        $ret = array();

        foreach ($a as $k => $v) {
            $ret[] = WALK(array("phpize_", $k)) . " => " . WALK(array("phpize_", $v));
        }

        return "array(" . implode(", ", $ret) . ")";

    } else if (is_string($a)) {
        return '"' . $self->common->walk(array("format_", $a)) . '"';

    } else if (is_null($a)) {
        return "NULL";

    } else {
        return var_export($a, TRUE);
    }
}

set (src, dst) -> WALK($dst) . " = " . WALK($src) . ";"

isset(src) -> "isset(" . WALK($src) . ")"

refarray (src, dst) {
    return (WALK($src) !== WALK($dst) ? WALK($dst) . " = array(); " : "") .
           "foreach (" . WALK($src) . " as \$_ref => \$_) { " .
               WALK($dst) . "[\$_ref] =& " . WALK($src) . "[\$_ref]; " .
           "}";
}

append (src, dst) -> WALK($dst) . " .= " . WALK($src) . ";"

arrayappend (src, dst) -> WALK($dst) . "[] = " . WALK($src) . ";"

stackinit (reg) -> WALK($reg) . "_sp = -1; " . WALK($reg) . " = array();"

push (src, dst) -> WALK($dst) . "[++" . WALK($dst) . "_sp] = " . WALK($src) . ";"

pop (src, dst) {
    return ($dst !== NULL ? WALK($dst) . " = " . WALK($src) . "[" . WALK($src) . "_sp]; " : "") .
    "unset(" . WALK($src) . "[" . WALK($src) . "_sp--]);";
}

top (src, sub) ->  WALK($src) . "[" . WALK($src) . "_sp" . ($sub !== array("value", 0) ? " - " . WALK($sub) : "") . "]";

jump (addr) {
    $addr = WALK($addr);

    if ($addr[0] !== "$") {
        return "goto L$addr;";

    } else {
        return "\$_addr = $addr; goto Lgoto;";
    }
}

jumpif (cond, addr) -> "if (" . WALK($cond) . ") { " . WALK(array("jump", $addr)) . " }"

return (label, addr) {
    $addr = WALK($addr);

    assert(count($self->returns[$label]) > 0);

    if (count($self->returns[$label]) === 1) {
        $to = $self->returns[$label][0];
        return "if ($addr !== $to) return array(FALSE, NULL, " . var_export($label, TRUE) . "); " .
               "goto L" . $to . ";";

    } else {
        $ret = "";

        foreach ($self->returns[$label] as $to) {
            $ret .= "if ($addr === $to) { goto L$to; } else ";
        }

        $ret .= "{ return array(FALSE, NULL, " . var_export($label, TRUE) . "); }";

        return $ret;
    }
}

run (n, env) -> "\$_value = \$this->_$n(" . WALK($env) . ");"

value (v) -> WALK(array("phpize_", $v))

not (v) -> "!" . WALK($v)

register (r) -> "\$_{$r}"

register_index (r, i) -> "\$_{$r}[" . (is_array($i) ? WALK($i) : WALK(array("phpize_", $i))) . "]"

pushenv (env) -> $self->common->walk(array("push_environment_", $env))

popenv -> $self->common->walk(array("pop_environment_"))

position {
    return "\$_a = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", (string) substr(\$_s, 0, \$_p)); " .
           "\$_b = 1; " .
           "if ((\$_c = strrpos(\$_a, \"\\n\")) !== FALSE) { " .
               "\$_b = substr_count(\$_a, \"\\n\") + 1; " .
               "\$_a = (string) substr(\$_a, \$_c + 1); " .
           "} " .
           "\$_fail = FALSE; " .
           "\$_value = array(\$_b, strlen(\$_a) + 1);";
}

any {
    return "\$_fail = TRUE; " .
           "if (isset(\$_s[\$_p])) { " .
               "\$_fail = FALSE; " .
               "\$_value = \$_s[\$_p]; " .
               "\$_p++; " .
           "} else { " .
               WALK(array("failed_", "any character")) .
           "}";
}

literal (s) {
    $encapsed_s = '"' . $self->common->walk(array("format_", $s)) . '"';

    return "\$_fail = TRUE; " .
           "if (" . (strlen($s) === 1 ? "isset(\$_s[\$_p]) && " : "") .
               "(\$_a = " . (strlen($s) === 1 ? "\$_s[\$_p]" : "substr(\$_s, \$_p, " . strlen($s) . ")") .
               ") === " . $encapsed_s . ") " .
           "{ " .
               "\$_fail = FALSE; " .
               "\$_value = \$_a; " .
               "\$_p += " . strlen($s) . "; " .
           "} else { " .
               WALK(array("failed_", $encapsed_s)) .
           "}";
}

range (match) {
    $or = array();
    $str = "";

    foreach ($match as $r) {
        if (is_array($r)) {
            $or[] = "(" . $r[0] . " <= \$_a && \$_a <= " . $r[1] . ")";
            $str .= chr($r[0]) . "-" . chr($r[1]);
        } else {
            $or[] = "(\$_a === $r)";
            $str .= chr($r);
        }
    }

    $str = $self->common->walk(array("format_", "[" . $str . "]"));

    return "\$_fail = TRUE; " .
           "if (isset(\$_s[\$_p]) && " .
                   "is_int(\$_a = ord(\$_s[\$_p])) && " .
                   "(" . implode(" || ", $or) . ")) { " .
               "\$_fail = FALSE; " .
               "\$_value = \$_s[\$_p]; " .
               "\$_p++; " .
           "} else { " .
                WALK(array("failed_", $str)) .
           "}";
}

end -> "goto Lend;"

failed_ (on) {
    return "if (\$_p >= \$_maxp) { " .
               "if (\$_p > \$_maxp) { " .
                   "\$_maxp = \$_p; " .
                   "\$_expected = array(); " .
               "} " .
               "if (!in_array(" . var_export($on, TRUE) . ", \$_expected)) { " .
                   "\$_expected[] = " . var_export($on, TRUE) . "; " .
               "} " .
           "} ";
}

_ {
    var_dump(NODE());
    die("Unexpected node.\n");
}
