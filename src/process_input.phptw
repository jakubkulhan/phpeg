-init {
    $self = (object) array(
        "file_to_init" => array(),
    );
}

-invoke (input) {
    list($provides, $definitions) = c(new parse_input, $input, array(), array());

    $definitions = c(new expand_macros, $provides, $definitions);
    c(new check_left_recursive, $provides, $definitions);

    foreach ($provides as $file => $about) {
        $rules = array();
        for ($i = 0; $i < $about->count; ++$i) {
            if (isset($definitions[$about->start + $i])) {
                $rules[$about->start + $i] = $definitions[$about->start + $i];
            }
        }


    }

    $used = array_flip(c(new used, $definitions));

    $reindex = array();
    $newdefinitions = array();
    foreach ($definitions as $k => $definition) {
        if (isset($used[$k])) {
            $newdefinitions[] = $definition;
            $reindex[] = $k;
        }
    }
    $reindex = array_flip($reindex);

    list($_, $definitions) = c(new reindex, $newdefinitions, $reindex);

    $first = TRUE;
    $namespace = NULL;
    $name = NULL;
    $inits = array();
    $invoke = NULL;

    foreach ($provides as $file => $about) {
        if ($about->init) {
            $self->file_to_init[$file] = count($inits);
            $inits[count($inits)] = $about->init;
        }

        foreach ($about->reindex as $l => $r) {
            if (!isset($reindex[$r])) {
                unset($about->reindex[$l]);
                continue;
            }

            $about->reindex[$l] = $reindex[$r];
        }

        reset($about->reindex);
        $about->start = current($about->reindex);
        $about->count = count($about->reindex);

        if ($about->count < 1) {
            unset($provides[$file]);
            continue;
        }

        if ($first) {
            $first = FALSE;
            $namespace = $about->namespace;
            $name = $about->name;
            if ($name === NULL && strncmp($file, "php:", 4) === 0) {
                $name = "parser";
            } if ($name === NULL) {
                $name = basename($file);
                if (($pos = strrpos($name, ".")) !== FALSE) {
                    $name = substr($name, 0, $pos);
                }
            }
            $invoke = $about->invoke;
        }
    }

    return array($namespace, $name, $inits, $invoke, WALKEACH($definitions));
}

rule (node) -> WALK($node)

all, first (nodes) -> array(NODETYPE(), WALKEACH($nodes))

action (node, code) -> array(NODETYPE(), WALK($node), $code)

and, not, optional, zero_or_more, one_or_more, quarantine, empty_environment (node) -> array(NODETYPE(), WALK($node))

bind (varname, node) -> array(NODETYPE(), $varname, WALK($node))

environment (file, node) -> array(NODETYPE(), $self->file_to_init[$file], WALK($node))

_ -> NODE()
