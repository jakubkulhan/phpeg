-import . "common/list.phpeg"
-import . "common/id.phpeg"
-import . "common/code.phpeg"
-import . "common/whitespace.phpeg"
-import . "common/parameters.phpeg"

phpeg
  = __
    declarations:( "-namespace" _ namespace:join(id, "\\") __
                   -> array("namespace", $namespace)

                 / "-name" _ name:id __
                   -> array("name", $name)

                 / "-init" __ code:code __
                   -> array("init", $code)

                 / "-invoke" __ parameters:parameters? __ code:code __
                   -> array("invoke", (array) $parameters, $code)

                 / "-constructor" __ parameters:parameters? __ code:code __
                   -> array("constructor", (array) $parameters, $code)

                 / "-private" __ name:id __
                   -> array("private", $name)

                 / "-import" _
                   spec:( "." _     -> TRUE
                        / name:id _ -> $name
                        )?
                   path:string __
                   -> array("import", $spec, $path)
                 )*

    definitions:( macro
                / rule
                )+
    !.
    -> array("phpeg", array_merge($declarations, $definitions))

macro
  = name:id parameters:parameters __ "=" __ expression:expression __
    -> array("macro", $name, $parameters, $expression)

rule
  = name:id __ "=" __ expression:expression __
    -> array("rule", $name, $expression)

expression
  = expressions:list(sequence, __ "/" __)
    {
        if (count($expressions) < 2) {
            return $expressions[0];
        } else {
            return array("first", $expressions);
        }
    }

sequence
  = expressions:list(prefix, _) __ action:code?
    {
        $ret = count($expressions) < 2
               ? $expressions[0]
               : array("all", $expressions);

        if ($action) {
            $ret = array("action", $ret, $action);
        }

        return $ret;
    }

prefix
  = "&" expression:suffix             -> array("and", $expression)
  / "!" expression:suffix             -> array("not", $expression)
  / "?" code:code                     -> array("semantic_predicate", $code)
  / varname:id ":^"                   -> array("bind", $varname, array("position"))
  / varname:id ":" expression:suffix  -> array("bind", $varname, $expression)
  / suffix

suffix
  = expression:primary suffix:( "?" -> "optional"
                              / "*" -> "zero_or_more"
                              / "+" -> "one_or_more"
                              )?
    -> $suffix ? array($suffix, $expression) : $expression

primary
  = importname:( name:id "." -> $name
               )?
    macroname:id
    "(" __ arguments:list(expression, __ "," __)? __ ")" !(__ "=")
    -> array("expand", $importname ? array($importname, $macroname) : $macroname, (array) $arguments)

  / importname:( name:id "." -> $name
               )?
    rulename:id !("(" / __ "=")
    -> array("apply", $importname ? array($importname, $rulename) : $rulename)

  / "(" __ expression:expression __ ")"
    -> $expression

  / literal:string
    -> array("literal", $literal)

  / range:range
    -> array("range", $range)

  / "." -> array("any")

range
  = "["
    matches:( !"]" a:char "-" !"]" b:char -> array(ord($a), ord($b))
            / !"]" c:char                 -> ord($c)
            )+
    "]"
    -> $matches

string
  = ["] value:(!["] char)* ["] -> implode("", $value)
  / ['] value:(!['] char)* ['] -> implode("", $value)

char
  = !"\\" .
  / "\\n" -> "\n"
  / "\\r" -> "\r"
  / "\\t" -> "\t"
  / "\\\\" -> "\\"
  / "\\\"" -> '"'
  / "\\" ['] -> "'"
  / "\\]" -> ']'
  / "\\x" a:[0-9a-fA-F] b:[0-9a-fA-F] -> chr(hexdec($a . $b))
