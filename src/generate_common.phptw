-init {
    $self = (object) array(
        "inits" => array(),
        "initscount" => 0,
        "generator" => NULL,
    );
}

-invoke (generator, namespace, name, inits, invoke) {
    $self->generator = $generator;

    $all = array("class_", $name, array(
        array("prolog_"),
        array("constructor_")
    ));

    foreach ($inits as $i => $init) {
        list($for, $code) = $init;

        foreach ($for as $j) {
            $self->inits[$j] = $i;
        }

        $all[2][] = array("init_", $i, $code);

        $self->initscount++;
    }

    $all[2][] = array("inits_", $self->inits);

    if ($invoke) {
        $all[2][] = array("invoke_", $invoke[0], $invoke[1]);
    } else {
        $all[2][] = array("invoke_", array("s"), "return \$this->parse(\$s);\n");
    }

    $all[2][] = array("parse_");

    if ($namespace) {
        $all = array("namespace_", $namespace, $all);
    }

    $all = array("toplevel_", $all);

    return WALK($all);
}

toplevel_ (node) {
    return "<?php\n" .
           "// autogenerated file, do not edit!\n" .
           WALK($node);
}

namespace_ (namespace, node) {
    return "namespace $namespace {\n" .
               WALK($node) .
           "}\n";
}

class_ (name, nodes) {
    return "class $name {\n" .
               i(implode("\n", WALKEACH($nodes))) .
           "}\n";
}

constructor_ {
    $inits = array();

    for ($i = 0; $i < $self->initscount; ++$i) {
        $inits[] = "\$this->_init$i();";
    }

    $inits = implode("\n", $inits) . "\n";

    return "private \$_envs = array();\n" .
           "public function __construct() {\n" .
               i($inits) .
           "}\n";
}

init_ (i, code) {
    return "private function _init$i() {\n" .
           "    \$this->_envs[$i] = array();\n" .
                i($code) .
           "    \$this->_envs[$i] = get_defined_vars();\n" .
           "}\n";
}

invoke_ (parameters, code) {
    foreach ($parameters as &$parameter) {
        $parameter = "$$parameter";
    }

    $parameters = implode(", ", $parameters);

    return "public function __invoke($parameters) {\n" .
               i($code) .
           "}\n";
}

format_ (s) {
    if (empty($s)) {
        return $s;
    }

    $formatted = "";

    foreach (str_split($s) as $c) {
        if ($c === '\\') { $formatted .= '\\\\'; }
        else if ($c === '"') { $formatted .= '\\"'; }
        else if ($c === "'") { $formatted .= "\\'"; }
        else if (ctype_print($c) || $c === " ") { $formatted .= $c; }
        else if ($c === "\t") { $formatted .= '\t'; }
        else if ($c === "\n") { $formatted .= '\n'; }
        else if ($c === "\r") { $formatted .= '\r'; }
        else {
            $hex = dechex(ord($c));
            $formatted .= "\\x" . (strlen($hex) < 2 ? str_pad($hex, 2, "0", STR_PAD_LEFT) : $hex);
        }
    }

    return $formatted;
}

_ -> $self->generator->walk(NODE())
