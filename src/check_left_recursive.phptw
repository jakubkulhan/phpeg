-init {
    $self = (object) array(
        "leftmost" => array(),
    );
}

-invoke (provided, definitions) {
    $self->leftmost = WALKEACH($definitions);

    $left_recursive = array();

    foreach ($self->leftmost as $name => $leftmost) {
        $leftmost = array_unique($leftmost);
        $chains = array();
        foreach ($leftmost as $l) {
            $chains[] = array($l);
        }

        $newchains = array();

        do {
            $done = TRUE;
            foreach ($chains as $chain) {
                if (!isset($self->leftmost[end($chain)])) { continue; }
                foreach ($self->leftmost[end($chain)] as $l) {
                    if (in_array($l, $chain)) {
                        if ($l === $chain[0]) {
                            $left_recursive[] = array_merge($chain, array($l));
                        }
                    } else {
                        $newchains[] = array_merge($chain, array($l));
                        $done = FALSE;
                    }
                }
            }

            $chains = $newchains;
            $newchains = array();
        } while (!$done);
    }

    $left_recursive = array_unique($left_recursive);

    if (!empty($left_recursive)) {
        $index_to_name = array();
        foreach ($provided as $file => $about) {
            foreach ($about->reindex as $name => $k) {
                $index_to_name[$k] = $name . "(" . $file . ")";
            }
        }

        foreach ($left_recursive as $i => $l) {
            $left_recursive[$i] = $index_to_name[array_shift($l)];
            foreach ($l as $k) {
                $left_recursive[$i] .= " -> " . $index_to_name[$k];
            }
        }

        die("Left recursive rules:\n" .
            "  " . implode("\n  ", $left_recursive) . "\n");
    }

    return TRUE;
}

first (nodes) -> call_user_func_array("array_merge", WALKEACH($nodes))

all (nodes) -> WALK($nodes[0])

action (node, code) -> WALK($node)

optional, zero_or_more, one_or_more, quarantine, empty_environment (node) -> WALK($node)

environment (i, node) -> WALK($node)

bind (varname, node) -> WALK($node)

apply (name) -> array($name)

_ -> array()
