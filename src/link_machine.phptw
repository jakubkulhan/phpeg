-init {
    $self = (object) array(
        "labels" => array(),
        "returns" => array(),
    );
}

-invoke (definitions) {
    reset($definitions);

    $ret = array(
        array("stackinit", array("register", "stack")),
        array("set", array("value", FALSE), array("register", "fail")),
        array("set", array("value", NULL), array("register", "value")),
        array("set", array("value", array()), array("register", "cache")),
        array("set", array("value", NULL), array("register", "a")),
        array("set", array("value", NULL), array("register", "b")),
        array("set", array("value", NULL), array("register", "c")),
        array("set", array("value", NULL), array("register", "d")),
        array("set", array("value", array()), array("register", "env")),
        array("push", array("offset", 2), array("register", "stack")),
        array("jump", array("label", key($definitions))),
        array("end"),
    );

    $codes = array();
    $code_to_label = array();

    foreach ($definitions as $label => $definition) {
        $self->labels[$label] = count($ret);
        $self->returns[$label] = array();

        list($instructions, $newcodes) = c(new compile_machine, $definition);

        $instructions = array_merge(
            array(
                array("push", array("value", $label . "@"), array("register", "stack")),
                array("append", array("register", "p"), array("top", array("register", "stack"), array("value", 0))),
                array("jumpif", array("not", array("isset", array("register_index", "cache", array("top", array("register", "stack"), array("value", 0))))),
                                array("offset", 7)),
                array("pop", array("register", "stack"), array("register", "a")),
                array("set", array("register_index", "cache", array("register", "a")), array("register", "b")),
                array("set", array("register_index", "b", 0), array("register", "fail")),
                array("set", array("register_index", "b", 1), array("register", "value")),
                array("set", array("register_index", "b", 2), array("register", "p")),
                array("jump", array("offset", 10 + count($instructions))),
                array("push", array("register", "env"), array("register", "stack")),
                array("set", array("value", array()), array("register", "env")),
            ),
            $instructions,
            array(
                array("pop", array("register", "stack"), array("register", "env")),
                array("pop", array("register", "stack"), array("register", "a")),
                array("set", array("value", array()), array("register", "b")),
                array("set", array("register", "fail"), array("register_index", "b", 0)),
                array("set", array("register", "value"), array("register_index", "b", 1)),
                array("set", array("register", "p"), array("register_index", "b", 2)),
                array("set", array("register", "b"), array("register_index", "cache", array("register", "a"))),
            )
        );

        $startn = count($codes);
        $codes = array_merge($codes, $newcodes);
        for ($i = $startn, $n = $startn + count($newcodes); $i < $n; ++$i) {
            $code_to_label[$i] = $label;
        }

        foreach ($instructions as &$instruction) {
            if ($instruction[0] === "run") {
                $instruction[1] += $startn;
            }
        }

        $instructions[] = array("pop", array("register", "stack"), array("register", "a"));
        $instructions[] = array("return", $label, array("register", "a"));
        $ret = array_merge($ret, $instructions);
    }

    $ret = WALKEACH($ret);

    return array($ret, $codes, $code_to_label, $self->returns);
}

set, push, pop, append, arrayappend (src, dst) -> array(NODETYPE(), WALK($src), WALK($dst))

jump (addr) -> array(NODETYPE(), WALK($addr))

jumpif (cond, addr) -> array(NODETYPE(), WALK($cond), WALK($addr))

run (n, env) -> array(NODETYPE(), $n, WALK($env))

offset (offset) -> array("value", INDEX() + $offset)

label (label) {
    $self->returns[$label][] = INDEX() + 1;
    return array("value", $self->labels[$label]);
}

_ /* value, register, register_index, isset, position, any, literal, range, not, end, stackinit, pushenv, popenv */ -> NODE()
